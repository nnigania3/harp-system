// ddr2_ctrl_test_example_sim_e0_d0.v

// This file was auto-generated from altera_avalon_mm_traffic_generator_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.0sp1 232 at 2013.08.30.12:07:55

`timescale 1 ps / 1 ps
module ddr2_ctrl_test_example_sim_e0_d0 #(
		parameter DEVICE_FAMILY                          = "Stratix III",
		parameter TG_AVL_DATA_WIDTH                      = 256,
		parameter TG_AVL_ADDR_WIDTH                      = 30,
		parameter TG_AVL_WORD_ADDR_WIDTH                 = 25,
		parameter TG_AVL_SIZE_WIDTH                      = 3,
		parameter TG_AVL_BE_WIDTH                        = 32,
		parameter DRIVER_SIGNATURE                       = 1431634050,
		parameter TG_GEN_BYTE_ADDR                       = 1,
		parameter TG_NUM_DRIVER_LOOP                     = 1,
		parameter TG_ENABLE_UNIX_ID                      = 0,
		parameter TG_USE_UNIX_ID                         = 0,
		parameter TG_RANDOM_BYTE_ENABLE                  = 1,
		parameter TG_ENABLE_READ_COMPARE                 = 1,
		parameter TG_POWER_OF_TWO_BURSTS_ONLY            = 0,
		parameter TG_BURST_ON_BURST_BOUNDARY             = 0,
		parameter TG_DO_NOT_CROSS_4KB_BOUNDARY           = 0,
		parameter TG_TIMEOUT_COUNTER_WIDTH               = 32,
		parameter TG_MAX_READ_LATENCY                    = 20,
		parameter TG_SINGLE_RW_SEQ_ADDR_COUNT            = 32,
		parameter TG_SINGLE_RW_RAND_ADDR_COUNT           = 32,
		parameter TG_SINGLE_RW_RAND_SEQ_ADDR_COUNT       = 32,
		parameter TG_BLOCK_RW_SEQ_ADDR_COUNT             = 8,
		parameter TG_BLOCK_RW_RAND_ADDR_COUNT            = 8,
		parameter TG_BLOCK_RW_RAND_SEQ_ADDR_COUNT        = 8,
		parameter TG_BLOCK_RW_BLOCK_SIZE                 = 8,
		parameter TG_TEMPLATE_STAGE_COUNT                = 4,
		parameter TG_SEQ_ADDR_GEN_MIN_BURSTCOUNT         = 1,
		parameter TG_SEQ_ADDR_GEN_MAX_BURSTCOUNT         = 4,
		parameter TG_RAND_ADDR_GEN_MIN_BURSTCOUNT        = 1,
		parameter TG_RAND_ADDR_GEN_MAX_BURSTCOUNT        = 4,
		parameter TG_RAND_SEQ_ADDR_GEN_MIN_BURSTCOUNT    = 1,
		parameter TG_RAND_SEQ_ADDR_GEN_MAX_BURSTCOUNT    = 4,
		parameter TG_RAND_SEQ_ADDR_GEN_RAND_ADDR_PERCENT = 50
	) (
		input  wire         clk,             // avl_clock.clk
		input  wire         clkby2,             // avl_clock.clk
		output wire [0:6]   disp1,
		output wire [0:6]   disp2,
		input  wire         reset_n,         // avl_reset.reset_n
		output wire         pass,            //    status.pass
		output wire         fail,            //          .fail
		output wire         test_complete,   //          .test_complete
		input  wire         avl_ready,       //       avl.waitrequest_n
		output      [TG_AVL_ADDR_WIDTH-1:0]  avl_addr,        //          .address
		output      [TG_AVL_SIZE_WIDTH-1:0]   avl_size,        //          .burstcount
		output      [TG_AVL_DATA_WIDTH-1:0] avl_wdata,       //          .writedata
		input       [TG_AVL_DATA_WIDTH-1:0] avl_rdata,       //          .readdata
		output              avl_write_req,   //          .write
		output              avl_read_req,    //          .read
		input               avl_rdata_valid, //          .readdatavalid
		output      [TG_AVL_BE_WIDTH-1:0]  avl_be,          //          .byteenable
		output              avl_burstbegin   //          .beginbursttransfer
	);



	localparam LINE_BITS    = 5;
        localparam ADDR_WIDTH   = 32;
        localparam CREG_ID_BITS = 3;
        localparam WORDS        = 8;
        `ifdef SIMD
        localparam DATA_WIDTH   = 32 *WORDS;
        `else
        localparam DATA_WIDTH   = 32;
	`endif
	localparam LINE_WIDTH   = TG_AVL_DATA_WIDTH;//DATA_WIDTH*WORDS;

	wire [6:0]data_display;

	wire led1;

	wire reset;	
	wire [31:0] addr_in; 		// address in from the core
	wire [DATA_WIDTH -1:0] data_in; 		// data from the core
	wire rw_in; 								// read / write command
	wire valid_in; 							//  valid reg on the addr, data buses
	wire [2:0] id_in; 		// ld/st Q id for request
	
	wire [DATA_WIDTH-1:0] data_out;	// data to be given to the core
	wire [2:0] id_out;	// ld/st Q id for request being satisfied
	wire ready_out; 						// the memory request for which data is ready
	wire stall_out;							// the memory system cannot accept anymore requests

        wire cache_reset_n;
	wire [DATA_WIDTH-1:0] harp_data_out;	// data to be given to the core
	wire harp_ready_out; 						// the memory request for which data is ready
        `ifdef SIMD
        wire [WORDS-1:0] valid_word_in;
        `endif


	harmonica harp_core
		(
	           .phi(clk),
	           .cache_data_in(data_out),
	           .cache_id_in(id_out),
	           .cache_ready_in(ready_out),
	           .cache_stall_in(stall_out),
	           .reset_in(reset),
	           .cache_addr_out(addr_in),
	           .cache_data_out(data_in),
	           .cache_id_out(id_in),
	           .cache_reset_n(cache_reset_n),
	           .cache_rw_out(rw_in),
                   `ifdef SIMD
	           .cache_valid_word(valid_word_in),
                   `endif
	           .cache_valid_out(valid_in),
	           .char_out(harp_ready_out),
	           .char_out_val(harp_data_out)
               );

	cache_subsystem  #(
		.AVL_ADDR(ADDR_WIDTH),
		.AVL_SIZE(TG_AVL_SIZE_WIDTH),
		.AVL_BE(TG_AVL_BE_WIDTH),
		.AVL_DATA_WIDTH(LINE_WIDTH)
	)
	cache
		(
		clk,
		clkby2,
		cache_reset_n,
		addr_in, 		// address in from the core
		data_in, 		// data from the core
		rw_in, 								// read / write command
		valid_in, 							//  valid reg on the addr, data buses
		id_in, 		// ld/st Q id for request
                `ifdef SIMD
		valid_word_in, 		// ld/st Q id for request
                `endif
		data_out,	// data to be given to the core
		id_out,	// ld/st Q id for request being satisfied
		ready_out, 				// the memory request for which data is ready
		stall_out, 							// the memory system cannot accept anymore requests
                avl_ready,      
                avl_addr,       
                avl_size,       
                avl_wdata,      
                avl_rdata,      
                avl_write_req,  
                avl_read_req,   
                avl_rdata_valid,
                avl_be,         
                avl_burstbegin  		
	);

reg [9:0]count;
reg [31:0] reset_time;	//check we will reset again
reg stop;
reg [31:0]data_sum;

wire [31:0]data_display_temp;
assign data_display_temp = data_sum;
assign data_display = data_display_temp[11:5];

   initial begin
   	reset_time <= 0;
   end

   always @ (posedge clk)
   begin
      reset_time <= reset_time + 1;
      if (reset == 1'b1) begin
	 data_sum <= 0;
	 stop <= 1'b0;	
      end else begin
	 //if(harp_ready_out == 1'b1)	begin
	 //if (addr_in == 32'd512 && valid_in == 1'b1)	begin
	 if (addr_in == 32'd256 && valid_in == 1'b1)	begin
		//data_sum <= data_sum + harp_data_out[6:0];
		data_sum <= data_sum + data_in[95:64];
		stop <= 1'b1;
	 end
      end
   end

assign reset    = ~reset_n ;
assign test_complete = stop;
//assign pass = (data_sum == 135)? 1'b1 : 1'b0 ;
//assign fail = (data_sum != 135)? 1'b1 : 1'b0 ;
assign pass = (data_sum == 1143)? 1'b1 : 1'b0 ;
assign fail = (data_sum != 1143)? 1'b1 : 1'b0 ;
//assign reset    = (reset_time < 32'd30) ? 1'b0 : 1'b1 ;
//Display module
//de3_display   display(clk, harp_data_out, harp_ready_out, disp1, disp2, led1);
wire temp_ready;
assign temp_ready = (addr_in == 32'd256 && valid_in == 1'b1) ? 1'b1 : 1'b0 ;
wire [6:0]temp_data;
assign temp_data =  data_in[31:0];
de3_display   display(clk, temp_data, temp_ready, disp1, disp2, led1);

endmodule
