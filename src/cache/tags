!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDR_WIDTH	L2_cache.v	/^	parameter ADDR_WIDTH = 32,$/;"	c
Arbiter1	Arbiter1.v	/^module Arbiter1$/;"	m
Arbiter1_test	Arbiter1_test.v	/^module Arbiter1_test();$/;"	m
BLOCK_STATE	nonblocking_fsm.v	/^    parameter IDLE=1, READ_NEXT=2, READ_L2=4, WB_L2=8, READ_WAIT=16, L2_COMPLETE=32, WB_L2_WAIT=64, BLOCK_STATE=128;$/;"	c
CACHE_SIZE	L1_cache.v	/^	parameter CACHE_SIZE = 16*1024,	\/\/ in Bytes$/;"	c
CREG_ID_BITS	L1_cache.v	/^	parameter CREG_ID_BITS = 4,		\/\/ ID BITS of the ld\/St Q from core$/;"	c
CREG_ID_BITS	Mem_dummy.v	/^	parameter CREG_ID_BITS = 4,		\/\/ ID BITS of the ld\/St Q from core$/;"	c
CREG_ID_BITS	cache_shared.v	/^	parameter CREG_ID_BITS = 3		\/\/ ID BITS of the ld\/St Q from core$/;"	c
CREG_ID_BITS	cache_subsystem.v	/^	parameter CREG_ID_BITS = 3		\/\/ ID BITS of the ld\/St Q from core$/;"	c
DATA_WIDTH	cache_shared.v	/^	parameter DATA_WIDTH = 32,			\/\/$/;"	c
DATA_WIDTH	cache_subsystem.v	/^	parameter DATA_WIDTH = 32,			\/\/$/;"	c
DMem	DMem.v	/^	reg [DATA_WIDTH-1:0] DMem [0:SIZE-1];$/;"	r
DMem	DMem.v	/^module DMem$/;"	m
FIFO	FIFO.v	/^module FIFO$/;"	m
FIFO_depth_log	Arbiter1_test.v	/^	parameter FIFO_depth_log = 3;$/;"	c
Frequency_Divider	freq_div.v	/^module Frequency_Divider #(parameter Divisor = 4, parameter Bits = 2) $/;"	m
GenericMux	GenericMux.v	/^module GenericMux $/;"	m
GenericOneHotMux	GenericOneHotMux.v	/^module GenericOneHotMux $/;"	m
IDLE	nonblocking_fsm.v	/^    parameter IDLE=1, READ_NEXT=2, READ_L2=4, WB_L2=8, READ_WAIT=16, L2_COMPLETE=32, WB_L2_WAIT=64, BLOCK_STATE=128;$/;"	c
INDEX_BITS	L1_cache.v	/^	parameter INDEX_BITS = 9,			\/\/ LOG(NO_OF_SETS)$/;"	c
INDEX_BITS	L2_cache.v	/^	parameter INDEX_BITS = 9,			\/\/ LOG(NO_OF_SETS)$/;"	c
Idle	blocking.v	/^    parameter Idle=0,Read_l2=1,WB_L2=2,Read_L1=3,Write_L1=4,Read_Wait=5;$/;"	c
Idle	blocking_fsm.v	/^    parameter Idle=0, Read_L2=1, WB_L2=2, WB_L2_Wait=3, Read_L1=4, Write_L1=5, Read_Wait=6;$/;"	c
Idle	blocking_fsm_L1.v	/^    parameter Idle=1, Read_L2=2, WB_L2=4, WB_L2_Wait=8, \/*Read_L1=8, Write_L1=16,*\/ Read_Wait=16;$/;"	c
L1_CACHE_SIZE	cache_shared.v	/^	parameter L1_CACHE_SIZE = 16*1024,	\/\/ in Bytes$/;"	c
L1_CACHE_SIZE	cache_subsystem.v	/^	parameter L1_CACHE_SIZE = 16*1024,	\/\/ in Bytes$/;"	c
L1_cache	L1_cache.v	/^module L1_cache #($/;"	m
L1_no	cache_shared.v	/^	wire L1_no;$/;"	n
L1_tag_array	L1_tag.v	/^module L1_tag_array$/;"	m
L1_to_L2_empty	Arbiter1.v	/^	output [num_L1s-1:0] L1_to_L2_full, L1_to_L2_empty;$/;"	p
L1_to_L2_empty	Arbiter1_test.v	/^	wire [num_L1s-1:0] L1_to_L2_full, L1_to_L2_empty;$/;"	n
L1_to_L2_full	Arbiter1.v	/^	output [num_L1s-1:0] L1_to_L2_full, L1_to_L2_empty;$/;"	p
L1_to_L2_full	Arbiter1_test.v	/^	wire [num_L1s-1:0] L1_to_L2_full, L1_to_L2_empty;$/;"	n
L1_to_L2_select	Arbiter1.v	/^	reg [num_L1s_log-1:0] L1_to_L2_select;$/;"	r
L2_COMPLETE	nonblocking_fsm.v	/^    parameter IDLE=1, READ_NEXT=2, READ_L2=4, WB_L2=8, READ_WAIT=16, L2_COMPLETE=32, WB_L2_WAIT=64, BLOCK_STATE=128;$/;"	c
L2_cache	L2_cache.v	/^module L2_cache$/;"	m
L2_tag_array	tag_array.v	/^module L2_tag_array$/;"	m
L2_to_L1_empty	Arbiter1.v	/^	output [num_L1s-1:0] L2_to_L1_full, L2_to_L1_empty;$/;"	p
L2_to_L1_empty	Arbiter1_test.v	/^	wire [num_L1s-1:0] L2_to_L1_full, L2_to_L1_empty;$/;"	n
L2_to_L1_full	Arbiter1.v	/^	output [num_L1s-1:0] L2_to_L1_full, L2_to_L1_empty;$/;"	p
L2_to_L1_full	Arbiter1_test.v	/^	wire [num_L1s-1:0] L2_to_L1_full, L2_to_L1_empty;$/;"	n
L2_valid_formatted	Arbiter1.v	/^	wire L2_valid_formatted; $/;"	n
LINE_BITS	L2_cache.v	/^	parameter LINE_BITS 	= 5,			\/\/ LOG(LINE_SIZE)$/;"	c
LINE_BITS	Mem_dummy.v	/^	parameter LINE_BITS 	= 5,			\/\/ LOG(LINE_SIZE)$/;"	c
LINE_BITS	cache_shared.v	/^	parameter LINE_BITS 	= 5,			\/\/ LOG(LINE_SIZE)$/;"	c
LINE_BITS	cache_subsystem.v	/^	parameter LINE_BITS 	= 5,			\/\/ LOG(LINE_SIZE)$/;"	c
LINE_WIDTH	Mem_dummy.v	/^	parameter LINE_WIDTH = 32,			\/\/$/;"	c
LSB_half	bus_signal_switcher.v	/^	reg [bus_width-1:0] LSB_half;$/;"	r
MSB_half	bus_signal_switcher.v	/^	reg [bus_width-1:0] MSB_half;$/;"	r
MSHR_1	MSHR_1.v	/^module MSHR_1$/;"	m
MSHR_1_test	MSHR_1_test.v	/^module MSHR_1_test;$/;"	m
MSHR_2	MSHR_2.v	/^module MSHR_2$/;"	m
MSHR_2_test	MSHR_2_test.v	/^module MSHR_2_test;$/;"	m
MSHR_ID_BITS	L2_cache.v	/^	parameter MSHR_ID_BITS = 3			\/\/ ID BITS for MSHR going to L2$/;"	c
Mem_dummy	Mem_dummy.v	/^module Mem_dummy$/;"	m
One	MSHR_2.v	/^	wire [mshr_tag_bits:0] One;$/;"	n
One	fill_list_shift_register.v	/^	wire [tag_bits:0] One;$/;"	n
One	free_list_FIFO.v	/^	wire [tag_bits:0] One;$/;"	n
OneS	fill_list_shift_register.v	/^	wire [tag_bits-1:0] OneS;$/;"	n
OneS	free_list_FIFO.v	/^	wire [tag_bits-1:0] OneS;$/;"	n
RAM_MGF	RAM_MGF.v	/^module RAM_MGF ($/;"	m
RAM_MGF	RAM_MGF_bb.v	/^module RAM_MGF ($/;"	m
READ_L2	nonblocking_fsm.v	/^    parameter IDLE=1, READ_NEXT=2, READ_L2=4, WB_L2=8, READ_WAIT=16, L2_COMPLETE=32, WB_L2_WAIT=64, BLOCK_STATE=128;$/;"	c
READ_NEXT	nonblocking_fsm.v	/^    parameter IDLE=1, READ_NEXT=2, READ_L2=4, WB_L2=8, READ_WAIT=16, L2_COMPLETE=32, WB_L2_WAIT=64, BLOCK_STATE=128;$/;"	c
READ_WAIT	nonblocking_fsm.v	/^    parameter IDLE=1, READ_NEXT=2, READ_L2=4, WB_L2=8, READ_WAIT=16, L2_COMPLETE=32, WB_L2_WAIT=64, BLOCK_STATE=128;$/;"	c
RW	MSHR_1.v	/^	reg RW [0:2**mshr_tag_bits-1];	$/;"	r
Read_L1	blocking.v	/^    parameter Idle=0,Read_l2=1,WB_L2=2,Read_L1=3,Write_L1=4,Read_Wait=5;$/;"	c
Read_L1	blocking_fsm.v	/^    parameter Idle=0, Read_L2=1, WB_L2=2, WB_L2_Wait=3, Read_L1=4, Write_L1=5, Read_Wait=6;$/;"	c
Read_L2	blocking_fsm.v	/^    parameter Idle=0, Read_L2=1, WB_L2=2, WB_L2_Wait=3, Read_L1=4, Write_L1=5, Read_Wait=6;$/;"	c
Read_L2	blocking_fsm_L1.v	/^    parameter Idle=1, Read_L2=2, WB_L2=4, WB_L2_Wait=8, \/*Read_L1=8, Write_L1=16,*\/ Read_Wait=16;$/;"	c
Read_Wait	blocking.v	/^    parameter Idle=0,Read_l2=1,WB_L2=2,Read_L1=3,Write_L1=4,Read_Wait=5;$/;"	c
Read_Wait	blocking_fsm.v	/^    parameter Idle=0, Read_L2=1, WB_L2=2, WB_L2_Wait=3, Read_L1=4, Write_L1=5, Read_Wait=6;$/;"	c
Read_Wait	blocking_fsm_L1.v	/^    parameter Idle=1, Read_L2=2, WB_L2=4, WB_L2_Wait=8, \/*Read_L1=8, Write_L1=16,*\/ Read_Wait=16;$/;"	c
Read_l2	blocking.v	/^    parameter Idle=0,Read_l2=1,WB_L2=2,Read_L1=3,Write_L1=4,Read_Wait=5;$/;"	c
WB_L2	blocking.v	/^    parameter Idle=0,Read_l2=1,WB_L2=2,Read_L1=3,Write_L1=4,Read_Wait=5;$/;"	c
WB_L2	blocking_fsm.v	/^    parameter Idle=0, Read_L2=1, WB_L2=2, WB_L2_Wait=3, Read_L1=4, Write_L1=5, Read_Wait=6;$/;"	c
WB_L2	blocking_fsm_L1.v	/^    parameter Idle=1, Read_L2=2, WB_L2=4, WB_L2_Wait=8, \/*Read_L1=8, Write_L1=16,*\/ Read_Wait=16;$/;"	c
WB_L2	nonblocking_fsm.v	/^    parameter IDLE=1, READ_NEXT=2, READ_L2=4, WB_L2=8, READ_WAIT=16, L2_COMPLETE=32, WB_L2_WAIT=64, BLOCK_STATE=128;$/;"	c
WB_L2_WAIT	nonblocking_fsm.v	/^    parameter IDLE=1, READ_NEXT=2, READ_L2=4, WB_L2=8, READ_WAIT=16, L2_COMPLETE=32, WB_L2_WAIT=64, BLOCK_STATE=128;$/;"	c
WB_L2_Wait	blocking_fsm.v	/^    parameter Idle=0, Read_L2=1, WB_L2=2, WB_L2_Wait=3, Read_L1=4, Write_L1=5, Read_Wait=6;$/;"	c
WB_L2_Wait	blocking_fsm_L1.v	/^    parameter Idle=1, Read_L2=2, WB_L2=4, WB_L2_Wait=8, \/*Read_L1=8, Write_L1=16,*\/ Read_Wait=16;$/;"	c
WORDS	L1_cache.v	/^	parameter WORDS = 8,$/;"	c
Write_L1	blocking.v	/^    parameter Idle=0,Read_l2=1,WB_L2=2,Read_L1=3,Write_L1=4,Read_Wait=5;$/;"	c
Write_L1	blocking_fsm.v	/^    parameter Idle=0, Read_L2=1, WB_L2=2, WB_L2_Wait=3, Read_L1=4, Write_L1=5, Read_Wait=6;$/;"	c
accept_L1	Arbiter1.v	/^	input [num_L1s-1:0] accept_L1; \/\/signal coming form L1s accepting the data packets form their FIFOS$/;"	p
accept_L1	Arbiter1_test.v	/^	reg [num_L1s-1:0] accept_L1; \/\/signal coming form L1s accepting the data packets form their FIFOS$/;"	r
accept_L1_formatted	Arbiter1.v	/^	wire [num_L1s-1:0] accept_L1_formatted;$/;"	n
accept_L1_formatted_1	Arbiter1.v	/^	wire [num_L1s-1:0] accept_L1_formatted_1;$/;"	n
accept_L2	Arbiter1.v	/^	input [num_L1s_log-1:0] accept_L2; \/\/signal coming from L2 accepting the data from its FIFO$/;"	p
accept_L2	Arbiter1_test.v	/^	reg [num_L1s_log-1:0] accept_L2; \/\/signal coming from L2 accepting the data from its FIFO$/;"	r
aclr	RAM_MGF.v	/^	input	  aclr;$/;"	p
aclr	RAM_MGF.v	/^	tri0	  aclr;$/;"	n
aclr	RAM_MGF_bb.v	/^	input	  aclr;$/;"	p
aclr	RAM_MGF_bb.v	/^	tri0	  aclr;$/;"	n
add	MSHR_1.v	/^	input add;$/;"	p
add	MSHR_1_test.v	/^	reg add;$/;"	r
add	MSHR_2.v	/^	input add;$/;"	p
add	MSHR_2_test.v	/^	reg add;$/;"	r
add	fill_list_shift_register.v	/^	input add, del;$/;"	p
add_addr	MSHR_2.v	/^	input [addr_bits-1:0] add_addr;$/;"	p
add_addr	MSHR_2_test.v	/^	reg [addr_bits-1:0] add_addr;$/;"	r
add_addr	mshr_dummy.v	/^    input [31:0] add_addr, $/;"	p
add_addr_RW	MSHR_1.v	/^	input add_addr_RW;$/;"	p
add_addr_RW	MSHR_1_test.v	/^	reg add_addr_RW;$/;"	r
add_addr_data	MSHR_1.v	/^	input [data_bits-1:0] add_addr_data;$/;"	p
add_addr_data	MSHR_1_test.v	/^	reg [data_bits-1:0] add_addr_data;$/;"	r
add_addr_tag	MSHR_1.v	/^	input [addr_tag_bits-1:0] add_addr_tag;$/;"	p
add_addr_tag	MSHR_1_test.v	/^	reg [addr_tag_bits-1:0] add_addr_tag;$/;"	r
add_cpu_id	MSHR_2.v	/^	input [cpu_id_bits-1:0] add_cpu_id;$/;"	p
add_cpu_id	MSHR_2_test.v	/^	reg [cpu_id_bits-1:0] add_cpu_id;$/;"	r
add_data	MSHR_2.v	/^	input [data_bits-1:0] add_data;$/;"	p
add_data	MSHR_2_test.v	/^	reg [data_bits-1:0] add_data;$/;"	r
add_dirty	MSHR_2.v	/^	input add_rw, add_dirty; $/;"	p
add_dirty	MSHR_2_test.v	/^	reg add_rw, add_dirty; $/;"	r
add_dirty	mshr_dummy.v	/^	 input add_rw, add_dirty, $/;"	p
add_entry_signal	MSHR_1.v	/^	reg add_entry_signal;$/;"	r
add_entry_signal	MSHR_2.v	/^	reg add_entry_signal;$/;"	r
add_rw	MSHR_2.v	/^	input add_rw, add_dirty; $/;"	p
add_rw	MSHR_2_test.v	/^	reg add_rw, add_dirty; $/;"	r
add_rw	mshr_dummy.v	/^	 input add_rw, add_dirty, $/;"	p
add_tag	fill_list_shift_register.v	/^	input [tag_bits-1:0]  add_tag, del_tag;$/;"	p
add_victim	MSHR_2.v	/^	input [ASSOC_BITS-1:0] add_victim;$/;"	p
addr	DMem.v	/^	input [ADDR_WIDTH-1:0] addr, $/;"	p
addr	MSHR_2.v	/^	reg [addr_bits-1:0] addr [0:2**mshr_tag_bits-1];$/;"	r
addr_L1	cache_shared.v	/^	wire [(ADDR_WIDTH*NUM_L1)-1:0] addr_L1;$/;"	n
addr_L1_in	Arbiter1.v	/^	input [(addr_width*num_L1s)-1:0] addr_L1_in;$/;"	p
addr_L1_in	Arbiter1_test.v	/^	reg [(addr_width*num_L1s)-1:0] addr_L1_in;$/;"	r
addr_L1_in_w	Arbiter1.v	/^	wire [(addr_width*num_L1s)-1:0] addr_L1_in_w;$/;"	n
addr_L1_out	Arbiter1.v	/^	output [(addr_width*num_L1s)-1:0] addr_L1_out;$/;"	p
addr_L1_out	Arbiter1_test.v	/^	wire [(addr_width*num_L1s)-1:0] addr_L1_out;$/;"	n
addr_L2_in	Arbiter1.v	/^	input [addr_width-1:0] addr_L2_in;$/;"	p
addr_L2_in	Arbiter1_test.v	/^	reg [addr_width-1:0] addr_L2_in;$/;"	r
addr_L2_in_ex	Arbiter1.v	/^	wire [(num_L1s*addr_width)-1:0] addr_L2_in_ex;$/;"	n
addr_L2_out	Arbiter1.v	/^	output [addr_width-1:0] addr_L2_out;$/;"	p
addr_L2_out	Arbiter1_test.v	/^	wire [addr_width-1:0] addr_L2_out;$/;"	n
addr_a	L2_cache.v	/^	wire [ADDR_WIDTH-1:0] addr_a;$/;"	n
addr_a	data_ram.v	/^	input [INDEX_WIDTH-1:0] addr_a, $/;"	p
addr_a_t	L1_tag.v	/^	wire [INDEX_WIDTH-1:0] addr_a_t, addr_b_t;$/;"	n
addr_a_t	array.v	/^	wire [INDEX_WIDTH-1:0] addr_a_t, addr_b_t;$/;"	n
addr_a_t	tag_array.v	/^	wire [INDEX_WIDTH-1:0] addr_a_t, addr_b_t;$/;"	n
addr_b	L1_cache.v	/^	reg [ADDR_WIDTH-1:0] addr_b;$/;"	r
addr_b	L2_cache.v	/^	reg [ADDR_WIDTH-1:0] addr_b;$/;"	r
addr_b_cache	L1_cache.v	/^	wire [ADDR_WIDTH-1:0] addr_b_cache;$/;"	n
addr_b_cache	L2_cache.v	/^	wire [ADDR_WIDTH-1:0] addr_b_cache;$/;"	n
addr_b_t	L1_tag.v	/^	wire [INDEX_WIDTH-1:0] addr_a_t, addr_b_t;$/;"	n
addr_b_t	array.v	/^	wire [INDEX_WIDTH-1:0] addr_a_t, addr_b_t;$/;"	n
addr_b_t	tag_array.v	/^	wire [INDEX_WIDTH-1:0] addr_a_t, addr_b_t;$/;"	n
addr_b_temp	L1_cache.v	/^	wire [ADDR_WIDTH-1:0] addr_b_temp;$/;"	n
addr_b_temp	L2_cache.v	/^	wire [ADDR_WIDTH-1:0] addr_b_temp;$/;"	n
addr_bef_reg	L1_cache.v	/^	wire [ADDR_WIDTH-1:0] addr_bef_reg;$/;"	n
addr_bef_reg	L2_cache.v	/^	wire [ADDR_WIDTH-1:0] addr_bef_reg;$/;"	n
addr_bits	MSHR_2_test.v	/^	parameter addr_bits=20;$/;"	c
addr_in	L1_cache.v	/^	input [ADDR_WIDTH-1:0] addr_in, 		\/\/ address in from the core$/;"	p
addr_in	Mem_dummy.v	/^	input [ADDR_WIDTH-1:0] addr_in, 		\/\/ address in from the core$/;"	p
addr_in	cache_subsystem.v	/^	input [ADDR_WIDTH-1:0] addr_in, 		\/\/ address in from the core$/;"	p
addr_in	nn_de3_cache_test.v	/^	reg [31:0] addr_in; 		\/\/ address in from the core$/;"	r
addr_in	test_L2.v	/^	reg [31:0] addr_in; 		\/\/ address in from the core$/;"	r
addr_in	test_blocking.v	/^	reg [31:0] addr_in; 		\/\/ address in from the core$/;"	r
addr_in	test_nonblocking.v	/^	reg [31:0] addr_in; 		\/\/ address in from the core$/;"	r
addr_in1	cache_shared.v	/^	input [ADDR_WIDTH-1:0] addr_in1, 		\/\/ address in from the core$/;"	p
addr_in1	test_shared.v	/^	reg [31:0] addr_in1; 		\/\/ address in from the core$/;"	r
addr_in2	test_shared.v	/^	reg [31:0] addr_in2; 		\/\/ address in from the core$/;"	r
addr_prev	L1_cache.v	/^	reg [ADDR_WIDTH-1:0] ram_addr, addr_prev;$/;"	r
addr_prev	L2_cache.v	/^	reg [ADDR_WIDTH-1:0] addr_prev;$/;"	r
addr_reg	DMem.v	/^	reg [ADDR_WIDTH-1:0] addr_reg;$/;"	r
addr_tag_bits	MSHR_1_test.v	/^	parameter addr_tag_bits=20; $/;"	c
addr_width	Arbiter1_test.v	/^	parameter addr_width = 32;$/;"	c
address_a	RAM_MGF.v	/^	input	[11:0]  address_a;$/;"	p
address_a	RAM_MGF_bb.v	/^	input	[11:0]  address_a;$/;"	p
address_b	RAM_MGF.v	/^	input	[8:0]  address_b;$/;"	p
address_b	RAM_MGF_bb.v	/^	input	[8:0]  address_b;$/;"	p
array	GenericMux.v	/^	wire [WIDTH-1:0] array [0:(2**SEL_BITS)-1];$/;"	n
array	GenericOneHotMux.v	/^	reg [WIDTH-1:0] array; \/\/[0:(2**WIDTH)-1];$/;"	r
array	array.v	/^	reg [DATA_WIDTH-1:0] array[2**INDEX_WIDTH-1:0];$/;"	r
array	array.v	/^module array$/;"	m
assoc_cache	L2_ram.v	/^module assoc_cache$/;"	m
block_signal	L1_cache.v	/^	wire block_signal;$/;"	n
block_signal	L2_cache.v	/^	wire block_signal;$/;"	n
block_signal_diff	L1_cache.v	/^	reg block_signal_diff;$/;"	r
block_signal_diff	L2_cache.v	/^	reg block_signal_diff;$/;"	r
block_signal_same	L1_cache.v	/^	reg block_signal_same;$/;"	r
block_signal_same	L2_cache.v	/^	reg block_signal_same;$/;"	r
block_stall	L1_cache.v	/^	wire block_stall;$/;"	n
block_stall	L2_cache.v	/^	wire block_stall;$/;"	n
blocking	blocking.v	/^module blocking ($/;"	m
blocking_fsm_L1	blocking_fsm_L1.v	/^module blocking_fsm_L1$/;"	m
blocking_fsm_L2	blocking_fsm.v	/^module blocking_fsm_L2$/;"	m
bus_out	bus_signal_switcher.v	/^	output [(num_buses*bus_width)-1:0] bus_out;$/;"	p
bus_signal_switcher	bus_signal_switcher.v	/^module bus_signal_switcher$/;"	m
cache_a_final	L2_ram.v	/^	wire [DATA_WIDTH-1:0] cache_a_final;$/;"	n
cache_b_final	L2_ram.v	/^	wire [DATA_WIDTH-1:0] cache_b_final;$/;"	n
cache_bus_a	L2_ram.v	/^	wire [(DATA_WIDTH*ASSOCIATIVITY)-1:0] cache_bus_a; $/;"	n
cache_bus_b	L2_ram.v	/^	wire [(DATA_WIDTH*ASSOCIATIVITY)-1:0] cache_bus_b;$/;"	n
cache_in2	L1_cache.v	/^	reg [DATA_WIDTH*WORDS-1:0] cache_in2;$/;"	r
cache_in2	L2_cache.v	/^	reg [DATA_WIDTH-1:0] cache_in2;$/;"	r
cache_out	L1_cache.v	/^	wire [DATA_WIDTH*WORDS-1:0] cache_out;$/;"	n
cache_out2	L1_cache.v	/^	wire [DATA_WIDTH*WORDS-1:0] cache_out2;$/;"	n
cache_out_a	L2_cache.v	/^	wire [DATA_WIDTH-1:0] cache_out_a;$/;"	n
cache_out_a	L2_ram.v	/^	wire [DATA_WIDTH-1:0] cache_out_a [0:ASSOCIATIVITY-1];$/;"	n
cache_out_a	data_ram.v	/^	wire [SMALL_DATA_WIDTH-1:0] cache_out_a [0:2**WORD_BITS-1];$/;"	n
cache_out_b	L2_cache.v	/^	wire [DATA_WIDTH-1:0] cache_out_b;$/;"	n
cache_out_b	L2_ram.v	/^	wire [DATA_WIDTH-1:0] cache_out_b [0:ASSOCIATIVITY-1];$/;"	n
cache_out_b	data_ram.v	/^	wire [SMALL_DATA_WIDTH-1:0] cache_out_b [0:2**WORD_BITS-1];$/;"	n
cache_shared	cache_shared.v	/^module cache_shared #($/;"	m
cache_subsystem	cache_subsystem.v	/^module cache_subsystem #($/;"	m
clk	FIFO.v	/^	input clk, enable, reset;$/;"	p
clk	L1_cache.v	/^	input clk,$/;"	p
clk	L1_tag.v	/^	input we_a, we_b, clk,$/;"	p
clk	L2_ram.v	/^	input clk,$/;"	p
clk	MSHR_1.v	/^	input clk, enable, reset;$/;"	p
clk	MSHR_1_test.v	/^	reg clk, enable, reset;$/;"	r
clk	MSHR_2.v	/^	input clk, enable, reset;                         \/\/These inputs and outputs are hopefully mostly self-explanatory$/;"	p
clk	MSHR_2_test.v	/^	reg clk, enable, reset;                         $/;"	r
clk	Mem_dummy.v	/^	input clk,$/;"	p
clk	array.v	/^	input we_a, we_b, clk,$/;"	p
clk	fill_list_shift_register.v	/^	input clk, enable, reset;$/;"	p
clk	free_list_FIFO.v	/^	input clk, enable, reset;$/;"	p
clk	mshr_dummy.v	/^    input clk, enable, reset, $/;"	p
clk	nn_de3_cache_test.v	/^	input clk;$/;"	p
clk	tag_array.v	/^	input we_a, we_b, clk, new_clk,$/;"	p
clk	test_L2.v	/^	reg clk;$/;"	r
clk	test_blocking.v	/^	reg clk;$/;"	r
clk	test_nonblocking.v	/^	reg clk;$/;"	r
clk	test_shared.v	/^	reg clk;$/;"	r
clk_L1	Arbiter1.v	/^	input clk_L1;$/;"	p
clk_L1	Arbiter1_test.v	/^	reg clk_L1;$/;"	r
clk_L2	Arbiter1.v	/^	input clk_L2;$/;"	p
clk_L2	Arbiter1_test.v	/^	reg clk_L2;$/;"	r
clk_fast	fast_to_slow_clk_signal.v	/^	input signal_in, clk_fast, clk_slow, reset;$/;"	p
clk_fast	slow_to_fast_clk_signal.v	/^	input signal_in, clk_fast, clk_slow, reset;$/;"	p
clk_slow	fast_to_slow_clk_signal.v	/^	input signal_in, clk_fast, clk_slow, reset;$/;"	p
clk_slow	slow_to_fast_clk_signal.v	/^	input signal_in, clk_fast, clk_slow, reset;$/;"	p
clkby2	test_L2.v	/^	reg clkby2;$/;"	r
clkby2	test_nonblocking.v	/^	reg clkby2;$/;"	r
clock	RAM_MGF.v	/^	input	  clock;$/;"	p
clock	RAM_MGF.v	/^	tri1	  clock;$/;"	n
clock	RAM_MGF_bb.v	/^	input	  clock;$/;"	p
clock	RAM_MGF_bb.v	/^	tri1	  clock;$/;"	n
clock	blocking.v	/^    input clock;$/;"	p
comp	MSHR_2.v	/^	reg [2**mshr_tag_bits-1:0] comp, comp2;$/;"	r
comp2	MSHR_2.v	/^	reg [2**mshr_tag_bits-1:0] comp, comp2;$/;"	r
comp_addr	MSHR_2.v	/^	input [addr_bits-1:0] comp_addr;$/;"	p
comp_read	MSHR_2.v	/^	output comp_read;$/;"	p
comp_read_tag	MSHR_2.v	/^	reg [mshr_tag_bits-1:0] comp_read_tag;$/;"	r
comp_true	MSHR_2.v	/^	output comp_true;$/;"	p
comp_victim	MSHR_2.v	/^	input [ASSOC_BITS-1:0] comp_victim;$/;"	p
count	Mem_dummy.v	/^	reg [MEM_CYCLE_BITS:0] count;$/;"	r
count	blocking_fsm_L1.v	/^	 reg [L2_CLK_DIV:0] count;$/;"	r
count	nn_de3_cache_test.v	/^reg [4:0]count;$/;"	r
count	nonblocking_fsm.v	/^	 reg [L2_CLK_DIV:0] count;$/;"	r
count_start	blocking_fsm_L1.v	/^	 reg count_start; $/;"	r
count_start	nonblocking_fsm.v	/^	 reg count_start;$/;"	r
counter	L1_cache.v	/^	reg [ASSOC_BITS-1:0] counter, victim_temp;$/;"	r
counter	L2_cache.v	/^	reg [ASSOC_BITS-1:0] counter, victim_temp;$/;"	r
counter	fast_to_slow_clk_signal.v	/^	reg [num_cycles-1:0] counter;$/;"	r
cpu_id	MSHR_2.v	/^	reg [cpu_id_bits-1:0] cpu_id [0:2**mshr_tag_bits-1];$/;"	r
cpu_id_bits	MSHR_2_test.v	/^	parameter cpu_id_bits = 2;$/;"	c
cpu_id_width	Arbiter1_test.v	/^	parameter cpu_id_width = 2; $/;"	c
data	MSHR_1.v	/^	reg [data_bits-1:0] data [0:2**mshr_tag_bits-1];$/;"	r
data	MSHR_2.v	/^	reg [data_bits-1:0] data [0:2**mshr_tag_bits-1];$/;"	r
data_L1	cache_shared.v	/^	wire [DATA_WIDTH*NUM_L1-1:0] data_L1;$/;"	n
data_L1_in	Arbiter1.v	/^	input [(data_width*num_L1s)-1:0] data_L1_in;$/;"	p
data_L1_in	Arbiter1_test.v	/^	reg [(data_width*num_L1s)-1:0] data_L1_in;$/;"	r
data_L1_in_w	Arbiter1.v	/^	wire [(data_width*num_L1s)-1:0] data_L1_in_w;$/;"	n
data_L1_out	Arbiter1.v	/^	output [(data_width*num_L1s)-1:0] data_L1_out;$/;"	p
data_L1_out	Arbiter1_test.v	/^	wire [(data_width*num_L1s)-1:0] data_L1_out;$/;"	n
data_L2_in	Arbiter1.v	/^	input [data_width-1:0] data_L2_in;$/;"	p
data_L2_in	Arbiter1_test.v	/^	reg [data_width-1:0] data_L2_in;$/;"	r
data_L2_in_ex	Arbiter1.v	/^	wire [(num_L1s*data_width)-1:0] data_L2_in_ex;$/;"	n
data_L2_out	Arbiter1.v	/^	output [data_width-1:0] data_L2_out;$/;"	p
data_L2_out	Arbiter1_test.v	/^	wire [data_width-1:0] data_L2_out;$/;"	n
data_a	L1_cache.v	/^	wire [DATA_WIDTH-1:0] data_a;$/;"	n
data_a	L2_cache.v	/^	wire [DATA_WIDTH-1:0] data_a;$/;"	n
data_a	L2_ram.v	/^	input [DATA_WIDTH-1:0] data_a, data_b,$/;"	p
data_a	RAM_MGF.v	/^	input	[31:0]  data_a;$/;"	p
data_a	RAM_MGF_bb.v	/^	input	[31:0]  data_a;$/;"	p
data_a	array.v	/^	input [DATA_WIDTH-1:0] data_a, data_b,$/;"	p
data_a	data_ram.v	/^	input [DATA_WIDTH-1:0] data_a, $/;"	p
data_a_dec	L2_ram.v	/^	wire [DATA_WIDTH-1:0] data_a_dec [0:ASSOCIATIVITY-1];$/;"	n
data_a_we	L1_cache.v	/^	wire data_a_we;$/;"	n
data_array	data_ram.v	/^module data_array$/;"	m
data_b	L2_ram.v	/^	input [DATA_WIDTH-1:0] data_a, data_b,$/;"	p
data_b	RAM_MGF.v	/^	input	[255:0]  data_b;$/;"	p
data_b	RAM_MGF_bb.v	/^	input	[255:0]  data_b;$/;"	p
data_b	array.v	/^	input [DATA_WIDTH-1:0] data_a, data_b,$/;"	p
data_b_dec	L2_ram.v	/^	wire [DATA_WIDTH-1:0] data_b_dec [0:ASSOCIATIVITY-1];$/;"	n
data_b_we	L1_cache.v	/^	wire data_b_we;$/;"	n
data_bef_reg	L1_cache.v	/^	wire [DATA_WIDTH-1:0] data_bef_reg;$/;"	n
data_bef_reg	L2_cache.v	/^	wire [DATA_WIDTH-1:0] data_bef_reg;$/;"	n
data_bits	MSHR_1_test.v	/^	parameter data_bits = 90; $/;"	c
data_bits	MSHR_2_test.v	/^	parameter data_bits = 90; $/;"	c
data_delay	Mem_dummy.v	/^	reg [LINE_WIDTH-1:0] data_delay [0:MEM_CYCLE-2];$/;"	r
data_display	nn_de3_cache_test.v	/^	output [6:0]data_display;$/;"	p
data_in	L2_cache.v	/^	input [DATA_WIDTH-1:0] data_in, 		\/\/ data from the core$/;"	p
data_in	bus_signal_switcher.v	/^	input [bus_width-1:0] data_in;$/;"	p
data_in	nn_de3_cache_test.v	/^	reg [31:0] data_in; 		\/\/ data from the core$/;"	r
data_in	test_L2.v	/^	reg [31:0] data_in; 		\/\/ data from the core$/;"	r
data_in	test_blocking.v	/^	reg [31:0] data_in; 		\/\/ data from the core$/;"	r
data_in	test_nonblocking.v	/^	reg [31:0] data_in; 		\/\/ data from the core$/;"	r
data_in1	test_shared.v	/^	reg [31:0] data_in1; 		\/\/ data from the core$/;"	r
data_in2	cache_shared.v	/^	input [DATA_WIDTH-1:0] data_in2, 		\/\/ data from the core$/;"	p
data_in2	test_shared.v	/^	reg [31:0] data_in2; 		\/\/ data from the core$/;"	r
data_out	L2_cache.v	/^	output [DATA_WIDTH-1:0] data_out,	\/\/ data to be given to the core$/;"	p
data_out	nn_de3_cache_test.v	/^	wire [31:0] data_out;	\/\/ data to be given to the core$/;"	n
data_out	test_L2.v	/^	wire [31:0] data_out;	\/\/ data to be given to the core$/;"	n
data_out	test_blocking.v	/^	wire [31:0] data_out;	\/\/ data to be given to the core$/;"	n
data_out	test_nonblocking.v	/^	wire [31:0] data_out;	\/\/ data to be given to the core$/;"	n
data_out1	test_shared.v	/^	wire [31:0] data_out1;	\/\/ data to be given to the core$/;"	n
data_out2	cache_shared.v	/^	output [DATA_WIDTH-1:0] data_out2,	\/\/ data to be given to the core$/;"	p
data_out2	test_shared.v	/^	wire [31:0] data_out2;	\/\/ data to be given to the core$/;"	n
data_out_L1	cache_shared.v	/^	wire [DATA_WIDTH*NUM_L1-1:0] data_out_L1;$/;"	n
data_prev	L1_cache.v	/^	reg [DATA_WIDTH-1:0] data_prev;$/;"	r
data_prev	L2_cache.v	/^	reg [DATA_WIDTH-1:0] data_prev;$/;"	r
data_width	Arbiter1_test.v	/^	parameter data_width = 256; $/;"	c
del	MSHR_1.v	/^	input del; $/;"	p
del	MSHR_1_test.v	/^	reg del; $/;"	r
del	MSHR_2.v	/^	input del; $/;"	p
del	MSHR_2_test.v	/^	reg del; $/;"	r
del	fill_list_shift_register.v	/^	input add, del;$/;"	p
del	mshr_dummy.v	/^    input del, $/;"	p
del_MSHR_tag	MSHR_1.v	/^	reg [mshr_tag_bits-1:0] del_MSHR_tag, isRW_MSHR_tag;$/;"	r
del_addr_tag	MSHR_1.v	/^	input [addr_tag_bits-1:0] del_addr_tag;$/;"	p
del_addr_tag	MSHR_1_test.v	/^	reg [addr_tag_bits-1:0] del_addr_tag;$/;"	r
del_entry_signal	MSHR_1.v	/^	reg del_entry_signal;$/;"	r
del_entry_signal	MSHR_2.v	/^	reg del_entry_signal;$/;"	r
del_tag	MSHR_2.v	/^	input [mshr_tag_bits-1:0] del_tag;$/;"	p
del_tag	MSHR_2_test.v	/^	reg [mshr_tag_bits-1:0] del_tag;$/;"	r
del_tag	fill_list_shift_register.v	/^	input [tag_bits-1:0]  add_tag, del_tag;$/;"	p
delayed_clk	L1_tag.v	/^	wire delayed_clk \/* synthesis keep *\/, inv_clk \/* synthesis keep *\/, new_clk;$/;"	n
diff_line_true	MSHR_2.v	/^	output diff_line_true;$/;"	p
dirty	MSHR_2.v	/^	reg dirty [0:2**mshr_tag_bits-1];$/;"	r
dirty	blocking.v	/^    input dirty;$/;"	p
dirty	blocking.v	/^    tri0 dirty;$/;"	n
dirty	blocking_fsm.v	/^    input dirty,$/;"	p
dirty	blocking_fsm_L1.v	/^    input dirty,$/;"	p
dirty	nonblocking_fsm.v	/^    input dirty,$/;"	p
dirty_a_i	L2_cache.v	/^	wire [ASSOCIATIVITY-1:0] dirty_a_i;$/;"	n
dirty_a_o	L2_cache.v	/^	wire [ASSOCIATIVITY-1:0] dirty_a_o;$/;"	n
dirty_a_o	L2_ram.v	/^	wire [ASSOCIATIVITY-1:0] dirty_a_o;$/;"	n
dirty_a_out	L2_ram.v	/^	output [2**ASSOC_BITS-1:0] dirty_a_out, dirty_b_out,$/;"	p
dirty_b_i	L2_cache.v	/^	wire [ASSOCIATIVITY-1:0] dirty_b_i;$/;"	n
dirty_b_o	L2_cache.v	/^	wire [ASSOCIATIVITY-1:0] dirty_b_o;$/;"	n
dirty_b_o	L2_ram.v	/^	wire [ASSOCIATIVITY-1:0] dirty_b_o;$/;"	n
dirty_b_out	L2_ram.v	/^	output [2**ASSOC_BITS-1:0] dirty_a_out, dirty_b_out,$/;"	p
dirty_out	L1_cache.v	/^	wire dirty_out;$/;"	n
dirty_out_b	L1_cache.v	/^	wire dirty_out_b;$/;"	n
dirty_ram	L1_tag.v	/^	reg dirty_ram[0:2**INDEX_WIDTH-1];$/;"	r
dirty_ram	tag_array.v	/^	reg dirty_ram[0:2**INDEX_WIDTH-1];$/;"	r
done_l2	blocking.v	/^    input done_l2;$/;"	p
done_l2	blocking.v	/^    tri0 done_l2;$/;"	n
empty	FIFO.v	/^	output empty, full;$/;"	p
empty	MSHR_2.v	/^	output empty, full;$/;"	p
empty	MSHR_2_test.v	/^	wire empty, full;$/;"	n
enable	Arbiter1.v	/^	input enable;$/;"	p
enable	Arbiter1_test.v	/^	reg enable;$/;"	r
enable	FIFO.v	/^	input clk, enable, reset;$/;"	p
enable	MSHR_1.v	/^	input clk, enable, reset;$/;"	p
enable	MSHR_1_test.v	/^	reg clk, enable, reset;$/;"	r
enable	MSHR_2.v	/^	input clk, enable, reset;                         \/\/These inputs and outputs are hopefully mostly self-explanatory$/;"	p
enable	MSHR_2_test.v	/^	reg clk, enable, reset;                         $/;"	r
enable	fill_list_shift_register.v	/^	input clk, enable, reset;$/;"	p
enable	free_list_FIFO.v	/^	input clk, enable, reset;$/;"	p
enable	mshr_dummy.v	/^    input clk, enable, reset, $/;"	p
entries_read	MSHR_1.v	/^	reg [mshr_tag_bits-1:0] entries_read;$/;"	r
entries_read	MSHR_2.v	/^	reg [mshr_tag_bits:0] entries_read;    \/\/This keeps track of the number of entries read $/;"	r
fast_to_slow_clk_signal	fast_to_slow_clk_signal.v	/^module fast_to_slow_clk_signal$/;"	m
fill_list_shift_register	fill_list_shift_register.v	/^module fill_list_shift_register$/;"	m
final_data_a	data_ram.v	/^	reg [SMALL_DATA_WIDTH-1:0] final_data_a [0:2**WORD_BITS-1];	$/;"	r
final_data_b	data_ram.v	/^	wire [SMALL_DATA_WIDTH-1:0] final_data_b [0:2**WORD_BITS-1];$/;"	n
flag	nonblocking_fsm.v	/^	 reg flag, reg_flag;$/;"	r
free_list_FIFO	free_list_FIFO.v	/^module free_list_FIFO$/;"	m
free_tag	FIFO.v	/^	output [data_width-1:0] free_tag;$/;"	p
free_tag	free_list_FIFO.v	/^	output [tag_bits-1:0] free_tag;$/;"	p
free_tag_valid	FIFO.v	/^	output free_tag_valid;$/;"	p
free_tag_valid	free_list_FIFO.v	/^	output free_tag_valid;$/;"	p
fstate	blocking.v	/^    reg [5:0] fstate;$/;"	r
fstate	blocking_fsm.v	/^    reg [5:0] fstate;$/;"	r
fstate	blocking_fsm_L1.v	/^    reg [5:0] fstate;$/;"	r
fstate	nonblocking_fsm.v	/^    reg [8:0] fstate;$/;"	r
full	FIFO.v	/^	output empty, full;$/;"	p
full	MSHR_2.v	/^	output empty, full;$/;"	p
full	MSHR_2_test.v	/^	wire empty, full;$/;"	n
full	mshr_dummy.v	/^    output full, $/;"	p
fullZeros	L1_cache.v	/^	wire [DATA_WIDTH*WORDS-1:0] fullZeros; $/;"	n
get	MSHR_2.v	/^	input get;$/;"	p
get	MSHR_2_test.v	/^	reg get;$/;"	r
get	mshr_dummy.v	/^    input get, $/;"	p
get_addr	MSHR_2.v	/^	output [addr_bits-1:0] get_addr;$/;"	p
get_addr	MSHR_2_test.v	/^	wire [addr_bits-1:0] get_addr;$/;"	n
get_cpu_id	MSHR_2.v	/^	output [cpu_id_bits-1:0] get_cpu_id;$/;"	p
get_cpu_id	MSHR_2_test.v	/^	wire [cpu_id_bits-1:0] get_cpu_id;$/;"	n
get_data	MSHR_2.v	/^	output [data_bits-1:0] get_data; $/;"	p
get_data	MSHR_2_test.v	/^	wire [data_bits-1:0] get_data; $/;"	n
get_dirty	MSHR_2.v	/^	output get_dirty, get_rw;$/;"	p
get_dirty	MSHR_2_test.v	/^	wire get_dirty, get_rw;$/;"	n
get_rw	MSHR_2.v	/^	output get_dirty, get_rw;$/;"	p
get_rw	MSHR_2_test.v	/^	wire get_dirty, get_rw;$/;"	n
get_tag	MSHR_2.v	/^	input [mshr_tag_bits-1:0] get_tag;$/;"	p
get_tag	MSHR_2_test.v	/^	reg [mshr_tag_bits-1:0] get_tag;$/;"	r
get_valid	MSHR_2.v	/^	output get_valid; $/;"	p
get_valid	MSHR_2_test.v	/^	wire get_valid; $/;"	n
get_victim	MSHR_2.v	/^	output [ASSOC_BITS-1:0] get_victim;$/;"	p
has_free_space	MSHR_1.v	/^	wire has_free_space;$/;"	n
has_free_space	MSHR_2.v	/^	wire has_free_space; \/\/This wire defines if there is atleast one free entry int eh MSHR (>=1 entry in the free_list_FIFO)$/;"	n
head_ptr	FIFO.v	/^	reg [index_bits-1:0] head_ptr;$/;"	r
head_ptr	free_list_FIFO.v	/^	reg [tag_bits-1:0] head_ptr;$/;"	r
hit	L1_cache.v	/^	wire hit; $/;"	n
hit	L2_cache.v	/^	wire hit;$/;"	n
hit_a	L2_ram.v	/^	output [2**ASSOC_BITS-1:0] hit_a, hit_b,$/;"	p
hit_b	L2_ram.v	/^	output [2**ASSOC_BITS-1:0] hit_a, hit_b,$/;"	p
hit_temp_a	L2_cache.v	/^	wire [ASSOCIATIVITY-1:0] hit_temp_a, hit_temp_b; $/;"	n
hit_temp_b	L2_cache.v	/^	wire [ASSOCIATIVITY-1:0] hit_temp_a, hit_temp_b; $/;"	n
i	Arbiter1.v	/^	integer i; \/\/This is where we select whihc FIFO gets forwarded to the L2$/;"	r
i	DMem.v	/^	integer i;$/;"	r
i	FIFO.v	/^	integer i; $/;"	r
i	GenericOneHotMux.v	/^	integer i, j;$/;"	r
i	L1_tag.v	/^	integer i;$/;"	r
i	L2_cache.v	/^   integer i;$/;"	r
i	MSHR_1.v	/^	integer i,j;$/;"	r
i	MSHR_2.v	/^	integer i;$/;"	r
i	Mem_dummy.v	/^	integer i;$/;"	r
i	data_ram.v	/^	integer i;	$/;"	r
i	free_list_FIFO.v	/^	integer i; $/;"	r
i	tag_array.v	/^	integer i;$/;"	r
i_Clock	freq_div.v	/^	input i_Clock,$/;"	p
id_L1	cache_shared.v	/^	wire [MSHR_ID_BITS*NUM_L1-1:0] id_L1;$/;"	n
id_L1_in	Arbiter1.v	/^	input [(cpu_id_width*num_L1s)-1:0] id_L1_in;$/;"	p
id_L1_in	Arbiter1_test.v	/^	reg [(cpu_id_width*num_L1s)-1:0] id_L1_in;$/;"	r
id_L1_in_w	Arbiter1.v	/^	wire [(cpu_id_width*num_L1s)-1:0] id_L1_in_w;	$/;"	n
id_L1_out	Arbiter1.v	/^	output [(cpu_id_width*num_L1s)-1:0] id_L1_out;$/;"	p
id_L1_out	Arbiter1_test.v	/^	wire [(cpu_id_width*num_L1s)-1:0] id_L1_out;$/;"	n
id_L2_in	Arbiter1.v	/^	input [cpu_id_width-1:0] id_L2_in;$/;"	p
id_L2_in	Arbiter1_test.v	/^	reg [cpu_id_width-1:0] id_L2_in;$/;"	r
id_L2_in_ex	Arbiter1.v	/^	wire [(num_L1s*cpu_id_width)-1:0] id_L2_in_ex; $/;"	n
id_L2_out	Arbiter1.v	/^	output [cpu_id_width-1:0] id_L2_out;$/;"	p
id_L2_out	Arbiter1_test.v	/^	wire [cpu_id_width-1:0] id_L2_out;$/;"	n
id_bef_reg	L1_cache.v	/^	wire [CREG_ID_BITS-1:0] id_bef_reg;$/;"	n
id_delay	Mem_dummy.v	/^	reg [CREG_ID_BITS-1:0] id_delay [0:MEM_CYCLE-2];$/;"	r
id_in	L1_cache.v	/^	input [CREG_ID_BITS-1:0] id_in, 		\/\/ ld\/st Q id for request$/;"	p
id_in	Mem_dummy.v	/^	input [CREG_ID_BITS-1:0] id_in, 		\/\/ ld\/st Q id for request$/;"	p
id_in	cache_subsystem.v	/^	input [CREG_ID_BITS-1:0] id_in, 		\/\/ ld\/st Q id for request$/;"	p
id_in	nn_de3_cache_test.v	/^	reg [2:0] id_in; 		\/\/ ld\/st Q id for request$/;"	r
id_in	test_L2.v	/^	reg [2:0] id_in; 		\/\/ ld\/st Q id for request$/;"	r
id_in	test_blocking.v	/^	reg [2:0] id_in; 		\/\/ ld\/st Q id for request$/;"	r
id_in	test_nonblocking.v	/^	reg [2:0] id_in; 		\/\/ ld\/st Q id for request$/;"	r
id_in1	cache_shared.v	/^	input [CREG_ID_BITS-1:0] id_in1, 		\/\/ ld\/st Q id for request$/;"	p
id_in1	test_shared.v	/^	reg [2:0] id_in1; 		\/\/ ld\/st Q id for request$/;"	r
id_in2	test_shared.v	/^	reg [2:0] id_in2; 		\/\/ ld\/st Q id for request$/;"	r
id_out	Mem_dummy.v	/^	output [CREG_ID_BITS-1:0] id_out,	\/\/ ld\/st Q id for request being satisfied$/;"	p
id_out	cache_subsystem.v	/^	output [CREG_ID_BITS-1:0] id_out,	\/\/ ld\/st Q id for request being satisfied$/;"	p
id_out	nn_de3_cache_test.v	/^	wire [2:0] id_out;	\/\/ ld\/st Q id for request being satisfied$/;"	n
id_out	test_L2.v	/^	wire [2:0] id_out;	\/\/ ld\/st Q id for request being satisfied$/;"	n
id_out	test_blocking.v	/^	wire [2:0] id_out;	\/\/ ld\/st Q id for request being satisfied$/;"	n
id_out	test_nonblocking.v	/^	wire [2:0] id_out;	\/\/ ld\/st Q id for request being satisfied$/;"	n
id_out1	cache_shared.v	/^	output [CREG_ID_BITS-1:0] id_out1,	\/\/ ld\/st Q id for request being satisfied$/;"	p
id_out1	test_shared.v	/^	wire [2:0] id_out1;	\/\/ ld\/st Q id for request being satisfied$/;"	n
id_out2	test_shared.v	/^	wire [2:0] id_out2;	\/\/ ld\/st Q id for request being satisfied$/;"	n
id_out_L1	cache_shared.v	/^	wire [MSHR_ID_BITS*NUM_L1-1:0] id_out_L1;$/;"	n
id_out_bef_reg	L2_cache.v	/^	wire [CREG_ID_BITS-1:0] id_out_bef_reg;$/;"	n
id_prev	L1_cache.v	/^	reg [CREG_ID_BITS-1:0] id_prev;$/;"	r
id_prev	L2_cache.v	/^	reg [CREG_ID_BITS-1:0] id_prev;$/;"	r
id_temp	L1_cache.v	/^	wire [CREG_ID_BITS-1:0] id_temp;$/;"	n
id_temp	L2_cache.v	/^	wire [CREG_ID_BITS-1:0] id_temp;$/;"	n
id_temp	Mem_dummy.v	/^	reg [CREG_ID_BITS-1:0] id_temp;$/;"	r
in_bus	GenericMux.v	/^	input [WIDTH*(2**SEL_BITS)-1:0] in_bus, $/;"	p
in_bus	GenericOneHotMux.v	/^	input [WIDTH*SEL_BITS-1:0] in_bus, $/;"	p
index_a	L1_cache.v	/^	wire [INDEX_BITS-1:0] index_in, index_a;$/;"	n
index_a	L2_ram.v	/^	wire [INDEX_WIDTH-1:0] index_a;$/;"	n
index_b	L1_cache.v	/^	wire [INDEX_BITS-1:0] index_b;$/;"	n
index_b	L2_ram.v	/^	wire [INDEX_WIDTH-1:0] index_b;$/;"	n
index_in	L1_cache.v	/^	wire [INDEX_BITS-1:0] index_in, index_a;$/;"	n
index_prev	L1_cache.v	/^	reg [INDEX_BITS-1:0] index_prev;$/;"	r
index_ptr	fill_list_shift_register.v	/^	reg [tag_bits-1:0] index_ptr;$/;"	r
input	DMem.v	/^	input [DATA_WIDTH-1:0] data,$/;"	p
input	DMem.v	/^	input clk, $/;"	p
input	GenericMux.v	/^	input [SEL_BITS-1:0] sel,$/;"	p
input	GenericOneHotMux.v	/^	input [SEL_BITS-1:0] sel,$/;"	p
input	L1_cache.v	/^	input [DATA_WIDTH-1:0] data_in, 		\/\/ data from the core$/;"	p
input	L1_cache.v	/^	input l2_stall_i$/;"	p
input	L1_cache.v	/^	input l2_valid_i,$/;"	p
input	L1_cache.v	/^	input reset,$/;"	p
input	L1_cache.v	/^	input valid_in, 							\/\/  valid input on the addr, data buses$/;"	p
input	L1_tag.v	/^	input [INDEX_WIDTH-1:0] addr_a, addr_b,$/;"	p
input	L1_tag.v	/^	input dirty_a_i, dirty_b_i,$/;"	p
input	L2_cache.v	/^	input [ADDR_WIDTH-1:0] addr_in, 		\/\/ address in from the core$/;"	p
input	L2_cache.v	/^	input [CREG_ID_BITS-1:0] id_in, 		\/\/ ld\/st Q id for request$/;"	p
input	L2_cache.v	/^	input clkby2,$/;"	c
input	L2_cache.v	/^	input rw_in, 								\/\/ read \/ write command$/;"	p
input	L2_ram.v	/^	input [2**ASSOC_BITS-1:0] dirty_a_i, dirty_b_i,$/;"	p
input	L2_ram.v	/^	input [2**ASSOC_BITS-1:0] sel_a, sel_b,$/;"	p
input	L2_ram.v	/^	input [ADDR_WIDTH-1:0] addr_a, addr_b,$/;"	p
input	L2_ram.v	/^	input clkby2,$/;"	p
input	L2_ram.v	/^	input valid_in,$/;"	p
input	Mem_dummy.v	/^	input [LINE_WIDTH-1:0] data_in, 		\/\/ data from the core$/;"	p
input	Mem_dummy.v	/^	input reset,$/;"	p
input	Mem_dummy.v	/^	input valid_in, 							\/\/  valid input on the addr, data buses$/;"	p
input	array.v	/^	input [INDEX_WIDTH-1:0] addr_a, addr_b,$/;"	p
input	blocking_fsm.v	/^    input clock,$/;"	p
input	blocking_fsm.v	/^    input done_l2,$/;"	p
input	blocking_fsm.v	/^    input rw_prev,$/;"	p
input	blocking_fsm_L1.v	/^    input clock,$/;"	p
input	blocking_fsm_L1.v	/^    input done_l2,$/;"	p
input	blocking_fsm_L1.v	/^    input rw_prev,$/;"	p
input	cache_shared.v	/^	input [ADDR_WIDTH-1:0] addr_in2, 		\/\/ address in from the core$/;"	p
input	cache_shared.v	/^	input [CREG_ID_BITS-1:0] id_in2, 		\/\/ ld\/st Q id for request$/;"	p
input	cache_shared.v	/^	input [DATA_WIDTH-1:0] data_in1, 		\/\/ data from the core$/;"	p
input	cache_shared.v	/^	input reset,$/;"	c
input	cache_shared.v	/^	input rw_in2, 								\/\/ read \/ write command$/;"	p
input	cache_shared.v	/^	input valid_in1, 							\/\/  valid input on the addr, data buses$/;"	p
input	cache_subsystem.v	/^	input [DATA_WIDTH-1:0] data_in, 		\/\/ data from the core$/;"	p
input	cache_subsystem.v	/^	input reset,$/;"	c
input	cache_subsystem.v	/^	input valid_in, 							\/\/  valid input on the addr, data buses$/;"	p
input	data_ram.v	/^	input [DATA_WIDTH-1:0] data_b,$/;"	p
input	data_ram.v	/^	input [INDEX_WIDTH-1:0] addr_b,$/;"	p
input	data_ram.v	/^	input we_a, we_b, mode_a, clk,$/;"	p
input	freq_div.v	/^	input i_Reset,$/;"	p
input	mshr_dummy.v	/^	 input [2:0] add_cpu_id, $/;"	p
input	mshr_dummy.v	/^	 input [31:0] add_data,$/;"	p
input	mshr_dummy.v	/^    input [31:0] del_addr, \/* This can be MSHR id as well. I would prefer that*\/ $/;"	p
input	mshr_dummy.v	/^    input [31:0] get_addr, \/* This can be MSHR id as well. I would prefer that*\/ $/;"	p
input	mshr_dummy.v	/^    input add, $/;"	p
input	nonblocking_fsm.v	/^	 input block,$/;"	p
input	nonblocking_fsm.v	/^	 input prev_read,$/;"	p
input	nonblocking_fsm.v	/^    input clock,$/;"	p
input	nonblocking_fsm.v	/^    input done_l2,$/;"	p
input	nonblocking_fsm.v	/^    input rw_prev,$/;"	p
input	tag_array.v	/^	input [INDEX_WIDTH-1:0] addr_a, addr_b,$/;"	p
input	tag_array.v	/^	input dirty_a_i, dirty_b_i,$/;"	p
inv_clk	L1_tag.v	/^	wire delayed_clk \/* synthesis keep *\/, inv_clk \/* synthesis keep *\/, new_clk;$/;"	n
isRW_MSHR_tag	MSHR_1.v	/^	reg [mshr_tag_bits-1:0] del_MSHR_tag, isRW_MSHR_tag;$/;"	r
isRW_RW	MSHR_1_test.v	/^	wire isRW_valid, isRW_RW;$/;"	n
isRW_request	MSHR_1.v	/^	input isRW_request;$/;"	p
isRW_request	MSHR_1_test.v	/^	reg isRW_request;$/;"	r
isRW_tag	MSHR_1.v	/^	input [addr_tag_bits-1:0] isRW_tag;$/;"	p
isRW_tag	MSHR_1_test.v	/^	reg [addr_tag_bits-1:0] isRW_tag;$/;"	r
isRW_valid	MSHR_1_test.v	/^	wire isRW_valid, isRW_RW;$/;"	n
j	GenericOneHotMux.v	/^	integer i, j;$/;"	r
j	MSHR_1.v	/^	integer i,j;$/;"	r
j	fill_list_shift_register.v	/^	integer j;$/;"	r
k	fill_list_shift_register.v	/^	integer k;$/;"	r
l	fill_list_shift_register.v	/^	integer l;$/;"	r
l2_addr_L1	cache_shared.v	/^	wire [(ADDR_WIDTH*NUM_L1)-1:0] l2_addr_L1;$/;"	n
l2_addr_en	L1_cache.v	/^   wire l2_addr_en;$/;"	n
l2_addr_en	blocking.v	/^    output l2_addr_en;$/;"	p
l2_addr_en	blocking.v	/^    reg l2_addr_en;$/;"	r
l2_addr_o	cache_shared.v	/^	wire [ADDR_WIDTH-1:0] l2_addr_o;$/;"	n
l2_addr_o	cache_subsystem.v	/^	reg [ADDR_WIDTH-1:0] l2_addr_o;$/;"	r
l2_addr_small	cache_subsystem.v	/^	wire [ADDR_WIDTH-1:0] l2_addr_small;$/;"	n
l2_addr_temp	cache_subsystem.v	/^	reg [ADDR_WIDTH-1:0] l2_addr_temp;$/;"	r
l2_big_flag	cache_subsystem.v	/^	reg l2_big_flag;$/;"	r
l2_data_L1	cache_shared.v	/^	wire [DATA_WIDTH*WORDS*NUM_L1-1:0] l2_data_L1;$/;"	n
l2_data_i	L1_cache.v	/^	input [DATA_WIDTH*8-1:0] l2_data_i,$/;"	p
l2_data_i	cache_shared.v	/^	wire [DATA_WIDTH*WORDS-1:0] l2_data_i;$/;"	n
l2_data_i	cache_subsystem.v	/^	wire [DATA_WIDTH*WORDS-1:0] l2_data_i;$/;"	n
l2_data_in_L1	cache_shared.v	/^	wire [DATA_WIDTH*WORDS*NUM_L1-1:0] l2_data_in_L1;$/;"	n
l2_data_o	L1_cache.v	/^	output [DATA_WIDTH*WORDS-1:0] l2_data_o,$/;"	p
l2_data_o	cache_shared.v	/^	wire [DATA_WIDTH*WORDS-1:0] l2_data_o;$/;"	n
l2_data_o	cache_subsystem.v	/^	reg [DATA_WIDTH*WORDS-1:0] l2_data_o;$/;"	r
l2_data_small	cache_subsystem.v	/^	wire [DATA_WIDTH*WORDS-1:0] l2_data_small;$/;"	n
l2_data_temp	cache_subsystem.v	/^	reg [DATA_WIDTH*WORDS-1:0] l2_data_temp;$/;"	r
l2_id_L1	cache_shared.v	/^	wire [MSHR_ID_BITS*NUM_L1-1:0] l2_id_L1;$/;"	n
l2_id_d	L1_cache.v	/^	reg [CREG_ID_BITS-1:0] l2_id_d, l2_id_d_d;$/;"	r
l2_id_d_d	L1_cache.v	/^	reg [CREG_ID_BITS-1:0] l2_id_d, l2_id_d_d;$/;"	r
l2_id_i	L1_cache.v	/^	input [MSHR_ID_BITS-1:0] l2_id_i,$/;"	p
l2_id_i	cache_shared.v	/^	wire [MSHR_ID_BITS-1:0] l2_id_i;$/;"	n
l2_id_i	cache_subsystem.v	/^	wire [MSHR_ID_BITS-1:0] l2_id_i;$/;"	n
l2_id_in_L1	cache_shared.v	/^	wire [MSHR_ID_BITS*NUM_L1-1:0] l2_id_in_L1;$/;"	n
l2_id_o	cache_shared.v	/^	wire [MSHR_ID_BITS-1:0] l2_id_o;$/;"	n
l2_id_o	cache_subsystem.v	/^	reg [MSHR_ID_BITS-1:0] l2_id_o;$/;"	r
l2_id_small	cache_subsystem.v	/^	wire [MSHR_ID_BITS-1:0] l2_id_small;$/;"	n
l2_id_temp	L1_cache.v	/^	wire [2:0] l2_id_temp; $/;"	n
l2_id_temp	cache_shared.v	/^	wire [MSHR_ID_BITS:0] l2_id_temp;$/;"	n
l2_id_temp	cache_subsystem.v	/^	reg [MSHR_ID_BITS-1:0] l2_id_temp;$/;"	r
l2_rw_L1	cache_shared.v	/^	wire [NUM_L1-1:0] l2_rw_L1;$/;"	n
l2_rw_o	cache_shared.v	/^	wire l2_rw_o;$/;"	n
l2_rw_o	cache_subsystem.v	/^	reg l2_rw_o;$/;"	r
l2_rw_small	cache_subsystem.v	/^	wire l2_rw_small;$/;"	n
l2_rw_temp	cache_subsystem.v	/^	reg l2_rw_temp;$/;"	r
l2_stall_i	cache_shared.v	/^	wire l2_stall_i;$/;"	n
l2_stall_i	cache_subsystem.v	/^	wire l2_stall_i;$/;"	n
l2_stall_in_L1	cache_shared.v	/^	wire [NUM_L1-1:0] l2_stall_in_L1;$/;"	n
l2_valid_L1	cache_shared.v	/^	wire [NUM_L1-1:0] l2_valid_L1;$/;"	n
l2_valid_big	cache_subsystem.v	/^	wire l2_valid_big;$/;"	n
l2_valid_i	cache_shared.v	/^	wire l2_valid_i;$/;"	n
l2_valid_i	cache_subsystem.v	/^	reg l2_valid_i;$/;"	r
l2_valid_in_L1	cache_shared.v	/^	wire [NUM_L1-1:0] l2_valid_in_L1;$/;"	n
l2_valid_o	L1_cache.v	/^	output l2_valid_o,$/;"	p
l2_valid_o	cache_shared.v	/^	wire l2_valid_o;$/;"	n
l2_valid_o	cache_subsystem.v	/^	reg l2_valid_o;$/;"	r
l2_valid_small	cache_subsystem.v	/^	wire l2_valid_small;$/;"	n
l2_valid_temp	cache_subsystem.v	/^	reg l2_valid_temp;$/;"	r
lessZeros	L1_cache.v	/^	wire [DATA_WIDTH*(WORDS-1)-1:0] lessZeros;$/;"	n
mem_addr_en	L2_cache.v	/^   wire mem_addr_en;$/;"	n
mem_addr_o	L2_cache.v	/^	wire [ADDR_WIDTH-1:0] mem_addr_o;$/;"	n
mem_data	Mem_dummy.v	/^	wire [LINE_WIDTH-1:0] mem_data;$/;"	n
mem_data_i	L2_cache.v	/^	wire [DATA_WIDTH-1:0] mem_data_i;$/;"	n
mem_data_o	L2_cache.v	/^	wire [DATA_WIDTH-1:0] mem_data_o;$/;"	n
mem_id_d	L2_cache.v	/^	reg [MSHR_ID_BITS-1:0] mem_id_d, mem_id_d_d;$/;"	r
mem_id_d_d	L2_cache.v	/^	reg [MSHR_ID_BITS-1:0] mem_id_d, mem_id_d_d;$/;"	r
mem_id_i	L2_cache.v	/^	wire [MSHR_ID_BITS-1:0] mem_id_i;$/;"	n
mem_id_o	L2_cache.v	/^	reg [MSHR_ID_BITS-1:0] mem_id_o;$/;"	r
mem_id_temp	L2_cache.v	/^	wire [MSHR_ID_BITS-1:0] mem_id_temp; $/;"	n
mem_rw_o	L2_cache.v	/^	wire mem_rw_o;$/;"	n
mem_stall_i	L2_cache.v	/^	wire mem_stall_i;$/;"	n
mem_valid_i	L2_cache.v	/^	wire mem_valid_i;$/;"	n
mem_valid_o	L2_cache.v	/^	wire mem_valid_o;$/;"	n
miss	blocking.v	/^    input miss;$/;"	p
miss	blocking.v	/^    tri0 miss;$/;"	n
miss	blocking_fsm.v	/^    input miss,$/;"	p
miss	blocking_fsm_L1.v	/^    input miss,$/;"	p
miss_bef_reg	L1_cache.v	/^	wire miss_bef_reg;$/;"	n
miss_bef_reg	L2_cache.v	/^	wire miss_bef_reg;$/;"	n
mshr_add	L1_cache.v	/^	wire mshr_add;$/;"	n
mshr_add	L2_cache.v	/^	wire mshr_add;$/;"	n
mshr_add_addr	L1_cache.v	/^	wire [ADDR_WIDTH-1:0] mshr_add_addr;$/;"	n
mshr_add_addr	L2_cache.v	/^	wire [ADDR_WIDTH-1:0] mshr_add_addr;$/;"	n
mshr_add_cpu_id	L1_cache.v	/^	wire [CREG_ID_BITS-1:0] mshr_add_cpu_id;$/;"	n
mshr_add_cpu_id	L2_cache.v	/^	wire [CREG_ID_BITS-1:0] mshr_add_cpu_id;$/;"	n
mshr_add_data	L1_cache.v	/^	wire [DATA_WIDTH-1:0] mshr_add_data;$/;"	n
mshr_add_data	L2_cache.v	/^	wire [DATA_WIDTH-1:0] mshr_add_data;$/;"	n
mshr_add_dirty	L1_cache.v	/^	wire mshr_add_rw, mshr_add_dirty;$/;"	n
mshr_add_dirty	L2_cache.v	/^	wire [ASSOCIATIVITY-1:0] mshr_add_dirty;$/;"	n
mshr_add_rw	L1_cache.v	/^	wire mshr_add_rw, mshr_add_dirty;$/;"	n
mshr_add_rw	L2_cache.v	/^	wire mshr_add_rw;$/;"	n
mshr_add_victim	L2_cache.v	/^	wire [ASSOC_BITS-1:0] mshr_add_victim;$/;"	n
mshr_comp_addr	L1_cache.v	/^	wire [ADDR_WIDTH-1:0] mshr_comp_addr;$/;"	n
mshr_comp_addr	L2_cache.v	/^	wire [ADDR_WIDTH-1:0] mshr_comp_addr;$/;"	n
mshr_comp_read	L1_cache.v	/^	wire mshr_comp_true, mshr_diff_true, mshr_same_true, mshr_comp_read;$/;"	n
mshr_comp_read	L2_cache.v	/^	wire mshr_comp_true, mshr_diff_true, mshr_same_true, mshr_comp_read;$/;"	n
mshr_comp_true	L1_cache.v	/^	wire mshr_comp_true, mshr_diff_true, mshr_same_true, mshr_comp_read;$/;"	n
mshr_comp_true	L2_cache.v	/^	wire mshr_comp_true, mshr_diff_true, mshr_same_true, mshr_comp_read;$/;"	n
mshr_del	L1_cache.v	/^	wire mshr_read_next, mshr_get, mshr_del;$/;"	n
mshr_del	L2_cache.v	/^	wire mshr_read_next, mshr_get, mshr_del;$/;"	n
mshr_diff_true	L1_cache.v	/^	wire mshr_comp_true, mshr_diff_true, mshr_same_true, mshr_comp_read;$/;"	n
mshr_diff_true	L2_cache.v	/^	wire mshr_comp_true, mshr_diff_true, mshr_same_true, mshr_comp_read;$/;"	n
mshr_dummy	mshr_dummy.v	/^module mshr_dummy$/;"	m
mshr_empty	L1_cache.v	/^	wire mshr_empty, mshr_full;$/;"	n
mshr_empty	L2_cache.v	/^	wire mshr_empty, mshr_full;$/;"	n
mshr_empty	nonblocking_fsm.v	/^	 input mshr_empty,$/;"	p
mshr_full	L1_cache.v	/^	wire mshr_empty, mshr_full;$/;"	n
mshr_full	L2_cache.v	/^	wire mshr_empty, mshr_full;$/;"	n
mshr_get	L1_cache.v	/^	wire mshr_read_next, mshr_get, mshr_del;$/;"	n
mshr_get	L2_cache.v	/^	wire mshr_read_next, mshr_get, mshr_del;$/;"	n
mshr_get_addr	L1_cache.v	/^	wire [ADDR_WIDTH-1:0] mshr_get_addr;$/;"	n
mshr_get_addr	L2_cache.v	/^	wire [ADDR_WIDTH-1:0] mshr_get_addr;$/;"	n
mshr_get_cpu_id	L1_cache.v	/^	wire [CREG_ID_BITS-1:0] mshr_get_cpu_id;$/;"	n
mshr_get_cpu_id	L2_cache.v	/^	wire [CREG_ID_BITS-1:0] mshr_get_cpu_id;$/;"	n
mshr_get_data	L1_cache.v	/^	wire [DATA_WIDTH-1:0] mshr_get_data;$/;"	n
mshr_get_data	L2_cache.v	/^	wire [DATA_WIDTH-1:0] mshr_get_data;$/;"	n
mshr_get_dirty	L1_cache.v	/^	wire mshr_get_rw, mshr_get_valid, mshr_get_dirty;$/;"	n
mshr_get_dirty	L2_cache.v	/^	wire mshr_get_rw, mshr_get_valid, mshr_get_dirty;$/;"	n
mshr_get_rw	L1_cache.v	/^	wire mshr_get_rw, mshr_get_valid, mshr_get_dirty;$/;"	n
mshr_get_rw	L2_cache.v	/^	wire mshr_get_rw, mshr_get_valid, mshr_get_dirty;$/;"	n
mshr_get_valid	L1_cache.v	/^	wire mshr_get_rw, mshr_get_valid, mshr_get_dirty;$/;"	n
mshr_get_valid	L2_cache.v	/^	wire mshr_get_rw, mshr_get_valid, mshr_get_dirty;$/;"	n
mshr_get_victim	L1_cache.v	/^	wire [ASSOC_BITS-1:0] mshr_rn_victim, mshr_get_victim;$/;"	n
mshr_get_victim	L2_cache.v	/^	wire [ASSOC_BITS-1:0] mshr_rn_victim, mshr_get_victim;$/;"	n
mshr_read_next	L1_cache.v	/^	wire mshr_read_next, mshr_get, mshr_del;$/;"	n
mshr_read_next	L2_cache.v	/^	wire mshr_read_next, mshr_get, mshr_del;$/;"	n
mshr_rn_dirty	L1_cache.v	/^	wire mshr_rn_dirty;$/;"	n
mshr_rn_dirty	L2_cache.v	/^	wire mshr_rn_dirty;$/;"	n
mshr_rn_valid	L1_cache.v	/^	wire mshr_rn_valid;$/;"	n
mshr_rn_valid	L2_cache.v	/^	wire mshr_rn_valid;$/;"	n
mshr_rn_valid_d	L1_cache.v	/^	reg mshr_rn_valid_d;$/;"	r
mshr_rn_victim	L1_cache.v	/^	wire [ASSOC_BITS-1:0] mshr_rn_victim, mshr_get_victim;$/;"	n
mshr_rn_victim	L2_cache.v	/^	wire [ASSOC_BITS-1:0] mshr_rn_victim, mshr_get_victim;$/;"	n
mshr_rn_victim_d	L1_cache.v	/^	reg [ASSOC_BITS-1:0] mshr_rn_victim_d, victim_prev;$/;"	r
mshr_rn_victim_d	L2_cache.v	/^	reg [ASSOC_BITS-1:0] mshr_rn_victim_d, victim_prev;$/;"	r
mshr_same_addr	L1_cache.v	/^	reg [ADDR_WIDTH-1:0] mshr_same_addr;$/;"	r
mshr_same_addr	L2_cache.v	/^	reg [ADDR_WIDTH-1:0] mshr_same_addr;$/;"	r
mshr_same_data	L1_cache.v	/^	reg [DATA_WIDTH-1:0] mshr_same_data;$/;"	r
mshr_same_data	L2_cache.v	/^	reg [DATA_WIDTH-1:0] mshr_same_data;$/;"	r
mshr_same_dirty	L1_cache.v	/^	reg mshr_same_rw, mshr_same_dirty;$/;"	r
mshr_same_dirty	L2_cache.v	/^	reg mshr_same_rw, mshr_same_dirty;$/;"	r
mshr_same_id	L1_cache.v	/^	reg [CREG_ID_BITS-1:0] mshr_same_id;$/;"	r
mshr_same_id	L2_cache.v	/^	reg [CREG_ID_BITS-1:0] mshr_same_id;$/;"	r
mshr_same_rw	L1_cache.v	/^	reg mshr_same_rw, mshr_same_dirty;$/;"	r
mshr_same_rw	L2_cache.v	/^	reg mshr_same_rw, mshr_same_dirty;$/;"	r
mshr_same_true	L1_cache.v	/^	wire mshr_comp_true, mshr_diff_true, mshr_same_true, mshr_comp_read;$/;"	n
mshr_same_true	L2_cache.v	/^	wire mshr_comp_true, mshr_diff_true, mshr_same_true, mshr_comp_read;$/;"	n
mshr_same_true_d	L1_cache.v	/^	reg mshr_same_true_d;$/;"	r
mshr_same_true_d	L2_cache.v	/^	reg mshr_same_true_d;$/;"	r
mshr_same_victim	L1_cache.v	/^	reg [ASSOC_BITS-1:0] mshr_same_victim;$/;"	r
mshr_same_victim	L2_cache.v	/^	reg [ASSOC_BITS-1:0] mshr_same_victim;$/;"	r
mshr_tag_bits	MSHR_1_test.v	/^	parameter mshr_tag_bits = 3;$/;"	c
mshr_tag_bits	MSHR_2_test.v	/^	parameter mshr_tag_bits = 3; $/;"	c
new_clk	L1_tag.v	/^	wire delayed_clk \/* synthesis keep *\/, inv_clk \/* synthesis keep *\/, new_clk;$/;"	n
new_clk	cache_shared.v	/^	wire new_clk, new_clkby2;	$/;"	n
new_clk	cache_subsystem.v	/^	wire new_clk, new_clkby2;	$/;"	n
new_clk	tag_array.v	/^	input we_a, we_b, clk, new_clk,$/;"	p
new_clkby2	cache_shared.v	/^	wire new_clk, new_clkby2;	$/;"	n
new_clkby2	cache_subsystem.v	/^	wire new_clk, new_clkby2;	$/;"	n
next_free_reg_tag	MSHR_1.v	/^	wire [mshr_tag_bits-1:0] next_free_reg_tag;$/;"	n
next_free_reg_tag	MSHR_2.v	/^	wire [mshr_tag_bits-1:0] next_free_reg_tag;  \/\/This wire defines the next avaiable entry in the MSHR. Its a direct output from the free list.$/;"	n
nn_de3_cache_test	nn_de3_cache_test.v	/^module nn_de3_cache_test (clk, ready_out, data_display);$/;"	m
nonblocking_fsm_L1	nonblocking_fsm.v	/^module nonblocking_fsm_L1$/;"	m
num_L1s	Arbiter1_test.v	/^	parameter num_L1s=2; $/;"	c
num_L1s_log	Arbiter1_test.v	/^	parameter num_L1s_log = 1; $/;"	c
o_Out	freq_div.v	/^	output o_Out$/;"	p
occupied_spaces	MSHR_1.v	/^	reg [mshr_tag_bits:0] occupied_spaces;$/;"	r
occupied_spaces	MSHR_2.v	/^	reg [mshr_tag_bits:0] occupied_spaces;   \/\/This keeps track of the number of entries actually in the 	$/;"	r
out	GenericMux.v	/^	output [WIDTH-1:0] out$/;"	p
out	GenericOneHotMux.v	/^	output [WIDTH-1:0] out$/;"	p
output	DMem.v	/^	output [DATA_WIDTH-1:0] mem_data_out	$/;"	p
output	L1_cache.v	/^	output [ADDR_WIDTH-1:0] l2_addr_o,$/;"	p
output	L1_cache.v	/^	output [DATA_WIDTH-1:0] data_out,	\/\/ data to be given to the core$/;"	p
output	L1_cache.v	/^	output l2_rw_o,$/;"	p
output	L1_cache.v	/^	output reg [MSHR_ID_BITS-1:0] l2_id_o,$/;"	p
output	L1_tag.v	/^	output reg [TAG_BITS-1:0] q_a, q_b,$/;"	p
output	L2_cache.v	/^	output reg [CREG_ID_BITS-1:0] id_out,	\/\/ ld\/st Q id for request being satisfied$/;"	p
output	L2_ram.v	/^	output [ADDR_WIDTH-LINE_BITS-INDEX_WIDTH-1:0] tag_out_a, tag_out_b,$/;"	p
output	L2_ram.v	/^	output valid_a_out, valid_b_out,$/;"	p
output	Mem_dummy.v	/^	output [LINE_WIDTH-1:0] data_out,	\/\/ data to be given to the core$/;"	p
output	Mem_dummy.v	/^	output ready_out, 						\/\/ the memory request for which data is ready$/;"	p
output	array.v	/^	output reg [DATA_WIDTH-1:0] q_a, q_b$/;"	p
output	blocking_fsm.v	/^    output reg rw_l2,$/;"	p
output	blocking_fsm_L1.v	/^    output reg rw_l2,$/;"	p
output	cache_shared.v	/^	output [CREG_ID_BITS-1:0] id_out2,	\/\/ ld\/st Q id for request being satisfied$/;"	p
output	cache_shared.v	/^	output [DATA_WIDTH-1:0] data_out1,	\/\/ data to be given to the core$/;"	p
output	cache_shared.v	/^	output ready_out1, 						\/\/ the memory request for which data is ready$/;"	p
output	cache_shared.v	/^	output stall_out2 							\/\/ the memory system cannot accept anymore requests$/;"	p
output	cache_subsystem.v	/^	output [DATA_WIDTH-1:0] data_out,	\/\/ data to be given to the core$/;"	p
output	cache_subsystem.v	/^	output ready_out, 						\/\/ the memory request for which data is ready$/;"	p
output	data_ram.v	/^	output [DATA_WIDTH-1:0] q_b$/;"	p
output	mshr_dummy.v	/^    output empty $/;"	p
output	mshr_dummy.v	/^    output reg rn_valid, $/;"	p
output	tag_array.v	/^	output reg [TAG_BITS-1:0] q_a, q_b,$/;"	p
parameter	L1_cache.v	/^	parameter ADDR_WIDTH = 32,$/;"	c
parameter	L1_cache.v	/^	parameter DATA_WIDTH = 32,			\/\/$/;"	c
parameter	L1_cache.v	/^	parameter LINE_BITS 	= 5,			\/\/ LOG(LINE_SIZE)$/;"	c
parameter	L1_cache.v	/^	parameter MSHR_ID_BITS = 4			\/\/ ID BITS for MSHR going to L2$/;"	c
parameter	L2_cache.v	/^	parameter ASSOC_BITS = 2,$/;"	c
parameter	L2_cache.v	/^	parameter CREG_ID_BITS = 3,		\/\/ ID BITS of the ld\/St Q from core$/;"	c
parameter	L2_cache.v	/^	parameter DATA_WIDTH = 32,			\/\/$/;"	c
parameter	Mem_dummy.v	/^	parameter ADDR_WIDTH = 32,$/;"	c
parameter	Mem_dummy.v	/^	parameter INDEX_BITS = 9,			\/\/ LOG(NO_OF_SETS)$/;"	c
parameter	Mem_dummy.v	/^	parameter MSHR_ID_BITS = 4			\/\/ ID BITS for MSHR going to L2$/;"	c
parameter	cache_shared.v	/^	parameter ADDR_WIDTH = 32,$/;"	c
parameter	cache_shared.v	/^	parameter ASSOC_BITS = 2,$/;"	c
parameter	cache_shared.v	/^	parameter L2_CACHE_SIZE = 128*1024,	\/\/ in Bytes$/;"	c
parameter	cache_subsystem.v	/^	parameter ADDR_WIDTH = 32,$/;"	c
parameter	cache_subsystem.v	/^	parameter ASSOC_BITS = 2,$/;"	c
parameter	cache_subsystem.v	/^	parameter L2_CACHE_SIZE = 128*1024,	\/\/ in Bytes$/;"	c
plusOne	freq_div.v	/^wire [Bits-1:0]	plusOne;$/;"	n
pop	FIFO.v	/^	input push, pop;$/;"	p
pop	free_list_FIFO.v	/^	input push, pop;$/;"	p
portA_op_en	L1_cache.v	/^	wire portA_op_en;$/;"	n
portA_op_en	L2_cache.v	/^	wire portA_op_en;$/;"	n
prev_state	nonblocking_fsm.v	/^	 reg [8:0] prev_state;$/;"	r
prev_state	slow_to_fast_clk_signal.v	/^	reg prev_state; \/\/Used to measure L2clk$/;"	r
push	FIFO.v	/^	input push, pop;$/;"	p
push	free_list_FIFO.v	/^	input push, pop;$/;"	p
push_tag	FIFO.v	/^	input [data_width-1:0] push_tag;$/;"	p
push_tag	free_list_FIFO.v	/^	input [tag_bits-1:0] push_tag;$/;"	p
q_a	L2_ram.v	/^	output [DATA_WIDTH-1:0] q_a, q_b$/;"	p
q_a	RAM_MGF.v	/^	output	[31:0]  q_a;$/;"	p
q_a	RAM_MGF.v	/^	wire [31:0] q_a = sub_wire0[31:0];$/;"	n
q_a	RAM_MGF_bb.v	/^	output	[31:0]  q_a;$/;"	p
q_a	data_ram.v	/^	output [DATA_WIDTH-1:0] q_a,$/;"	p
q_b	L2_ram.v	/^	output [DATA_WIDTH-1:0] q_a, q_b$/;"	p
q_b	RAM_MGF.v	/^	output	[255:0]  q_b;$/;"	p
q_b	RAM_MGF.v	/^	wire [255:0] q_b = sub_wire1[255:0];$/;"	n
q_b	RAM_MGF_bb.v	/^	output	[255:0]  q_b;$/;"	p
r_Count	freq_div.v	/^reg [Bits-1:0]	r_Count;$/;"	r
ram_addr	L1_cache.v	/^	reg [ADDR_WIDTH-1:0] ram_addr, addr_prev;$/;"	r
rd_valid_b	L1_cache.v	/^   wire rd_valid_b;$/;"	n
rd_valid_b	L2_cache.v	/^   wire rd_valid_b;$/;"	n
rd_valid_b	blocking.v	/^    output rd_valid_b;$/;"	p
rd_valid_b	blocking.v	/^    reg rd_valid_b;$/;"	r
rdy_bef_reg	L1_cache.v	/^	wire rdy_bef_reg; $/;"	n
rdy_bef_reg	L2_cache.v	/^	wire rdy_bef_reg; $/;"	n
read	MSHR_1.v	/^	reg read [0:2**mshr_tag_bits-1];$/;"	r
read	MSHR_2.v	/^	reg read [0:2**mshr_tag_bits-1];    \/\/This signal is to see which entries have been read. I don't think we need this but I pout this in temporarilly $/;"	r
read	fill_list_shift_register.v	/^	input read;$/;"	p
read_MSHR_tag	MSHR_1.v	/^	wire [mshr_tag_bits-1:0] read_MSHR_tag;$/;"	n
read_addr_data	MSHR_1.v	/^	output [data_bits-1:0] read_addr_data; $/;"	p
read_addr_data	MSHR_1_test.v	/^	wire [data_bits-1:0] read_addr_data; $/;"	n
read_addr_tag	MSHR_1.v	/^	output [addr_tag_bits-1:0] read_addr_tag;$/;"	p
read_addr_tag	MSHR_1_test.v	/^	wire [addr_tag_bits-1:0] read_addr_tag;$/;"	n
read_entry_signal	MSHR_1.v	/^	reg read_entry_signal;$/;"	r
read_entry_signal	MSHR_2.v	/^	reg read_entry_signal;$/;"	r
read_next	MSHR_1.v	/^	input read_next;$/;"	p
read_next	MSHR_1_test.v	/^	reg read_next;$/;"	r
read_next	MSHR_2.v	/^	input read_next;$/;"	p
read_next	MSHR_2_test.v	/^	reg read_next;$/;"	r
read_next	mshr_dummy.v	/^    input read_next, $/;"	p
read_valid	MSHR_1.v	/^	output read_valid; $/;"	p
read_valid	MSHR_1_test.v	/^	wire read_valid; $/;"	n
ready_out	nn_de3_cache_test.v	/^	output ready_out;$/;"	p
ready_out	nn_de3_cache_test.v	/^	wire ready_out; 						\/\/ the memory request for which data is ready$/;"	n
ready_out	test_L2.v	/^	wire ready_out; 						\/\/ the memory request for which data is ready$/;"	n
ready_out	test_blocking.v	/^	wire ready_out; 						\/\/ the memory request for which data is ready$/;"	n
ready_out	test_nonblocking.v	/^	wire ready_out; 						\/\/ the memory request for which data is ready$/;"	n
ready_out1	test_shared.v	/^	wire ready_out1; 						\/\/ the memory request for which data is ready$/;"	n
ready_out2	cache_shared.v	/^	output ready_out2, 						\/\/ the memory request for which data is ready$/;"	p
ready_out2	test_shared.v	/^	wire ready_out2; 						\/\/ the memory request for which data is ready$/;"	n
ready_out_L1	cache_shared.v	/^	wire [NUM_L1-1:0] ready_out_L1;$/;"	n
ready_temp	Mem_dummy.v	/^	reg ready_temp;$/;"	r
reg	L1_cache.v	/^	output reg [CREG_ID_BITS-1:0] id_out,	\/\/ ld\/st Q id for request being satisfied$/;"	p
reg	L1_cache.v	/^	output reg ready_out, 						\/\/ the memory request for which data is ready$/;"	p
reg	L1_tag.v	/^	output reg dirty_a_o, dirty_b_o,$/;"	p
reg	L1_tag.v	/^	output reg valid_a_o, valid_b_o$/;"	p
reg	L2_cache.v	/^	output reg ready_out, 						\/\/ the memory request for which data is ready$/;"	p
reg	MSHR_1.v	/^	output reg isRW_valid, isRW_RW;$/;"	p
reg	blocking_fsm.v	/^	 output reg stall_out_d$/;"	p
reg	blocking_fsm.v	/^    output reg l2_addr_en,$/;"	p
reg	blocking_fsm.v	/^    output reg rd_valid_b,$/;"	p
reg	blocking_fsm.v	/^    output reg stall_out,$/;"	p
reg	blocking_fsm.v	/^    output reg valid_l2,$/;"	p
reg	blocking_fsm.v	/^    output reg we_b,$/;"	p
reg	blocking_fsm_L1.v	/^	 output reg stall_out_d$/;"	p
reg	blocking_fsm_L1.v	/^    output reg l2_addr_en,$/;"	p
reg	blocking_fsm_L1.v	/^    output reg rd_valid_b,$/;"	p
reg	blocking_fsm_L1.v	/^    output reg stall_out,$/;"	p
reg	blocking_fsm_L1.v	/^    output reg valid_l2,$/;"	p
reg	blocking_fsm_L1.v	/^    output reg we_b,$/;"	p
reg	fill_list_shift_register.v	/^	output reg [tag_bits-1:0] tag_out;$/;"	p
reg	fill_list_shift_register.v	/^	output reg valid_out;$/;"	p
reg	mshr_dummy.v	/^	 output reg [2:0] get_cpu_id,$/;"	p
reg	mshr_dummy.v	/^	 output reg [2:0] rn_mshr_id, $/;"	p
reg	mshr_dummy.v	/^	 output reg [31:0] get_data,$/;"	p
reg	mshr_dummy.v	/^	 output reg [31:0] rn_addr, rn_data, $/;"	p
reg	mshr_dummy.v	/^	 output reg rn_rw, rn_dirty, $/;"	p
reg	mshr_dummy.v	/^    output reg get_valid, get_rw, $/;"	p
reg	nonblocking_fsm.v	/^	 output reg block_stall$/;"	p
reg	nonblocking_fsm.v	/^	 output reg mshr_del, $/;"	p
reg	nonblocking_fsm.v	/^	 output reg mshr_get, $/;"	p
reg	nonblocking_fsm.v	/^	 output reg mshr_read_next,$/;"	p
reg	nonblocking_fsm.v	/^	 output reg rw_l2,$/;"	p
reg	nonblocking_fsm.v	/^	 output reg stall_out_d,$/;"	p
reg	nonblocking_fsm.v	/^    output reg l2_addr_en,$/;"	p
reg	nonblocking_fsm.v	/^    output reg rd_valid_b,$/;"	p
reg	nonblocking_fsm.v	/^    output reg stall_out,$/;"	p
reg	nonblocking_fsm.v	/^    output reg valid_l2,$/;"	p
reg	nonblocking_fsm.v	/^    output reg we_b,$/;"	p
reg	slow_to_fast_clk_signal.v	/^	output reg signal_out;$/;"	p
reg	tag_array.v	/^	output reg dirty_a_o, dirty_b_o,$/;"	p
reg	tag_array.v	/^	output reg valid_a_o, valid_b_o$/;"	p
reg_block_stall	nonblocking_fsm.v	/^	 reg reg_block_stall;$/;"	r
reg_flag	nonblocking_fsm.v	/^	 reg flag, reg_flag;$/;"	r
reg_fstate	blocking.v	/^    reg [5:0] reg_fstate;$/;"	r
reg_fstate	blocking_fsm.v	/^    reg [5:0] reg_fstate;$/;"	r
reg_fstate	blocking_fsm_L1.v	/^    reg [5:0] reg_fstate;$/;"	r
reg_fstate	nonblocking_fsm.v	/^    reg [8:0] reg_fstate;$/;"	r
reg_l2_addr_en	blocking.v	/^    reg reg_l2_addr_en;$/;"	r
reg_l2_addr_en	blocking_fsm.v	/^    reg reg_l2_addr_en;$/;"	r
reg_l2_addr_en	blocking_fsm_L1.v	/^    reg reg_l2_addr_en;$/;"	r
reg_l2_addr_en	nonblocking_fsm.v	/^    reg reg_l2_addr_en;$/;"	r
reg_mshr_del	nonblocking_fsm.v	/^	 reg reg_mshr_del;$/;"	r
reg_mshr_get	nonblocking_fsm.v	/^	 reg reg_mshr_get; $/;"	r
reg_mshr_read_next	nonblocking_fsm.v	/^	 reg reg_mshr_read_next;$/;"	r
reg_prev_state	nonblocking_fsm.v	/^    reg [8:0] reg_prev_state;$/;"	r
reg_rd_valid_b	blocking.v	/^    reg reg_rd_valid_b;$/;"	r
reg_rd_valid_b	blocking_fsm.v	/^    reg reg_rd_valid_b;$/;"	r
reg_rd_valid_b	blocking_fsm_L1.v	/^    reg reg_rd_valid_b;$/;"	r
reg_rd_valid_b	nonblocking_fsm.v	/^    reg reg_rd_valid_b;$/;"	r
reg_rw_l2	blocking.v	/^    reg reg_rw_l2;$/;"	r
reg_rw_l2	blocking_fsm.v	/^	 reg reg_rw_l2;$/;"	r
reg_rw_l2	blocking_fsm_L1.v	/^	 reg reg_rw_l2;$/;"	r
reg_rw_l2	nonblocking_fsm.v	/^	 reg reg_rw_l2;$/;"	r
reg_stall_proc	blocking.v	/^    reg reg_stall_proc;$/;"	r
reg_stall_proc	blocking_fsm.v	/^    reg reg_stall_proc;$/;"	r
reg_stall_proc	blocking_fsm_L1.v	/^    reg reg_stall_proc;$/;"	r
reg_stall_proc	nonblocking_fsm.v	/^    reg reg_stall_proc;$/;"	r
reg_stall_proc_d	nonblocking_fsm.v	/^	 reg reg_stall_proc_d;$/;"	r
reg_valid_l2	blocking.v	/^    reg reg_valid_l2;$/;"	r
reg_valid_l2	blocking_fsm.v	/^    reg reg_valid_l2;$/;"	r
reg_valid_l2	blocking_fsm_L1.v	/^    reg reg_valid_l2;$/;"	r
reg_valid_l2	nonblocking_fsm.v	/^    reg reg_valid_l2;$/;"	r
reg_we_b	blocking.v	/^    reg reg_we_b;$/;"	r
reg_we_b	blocking_fsm.v	/^    reg reg_we_b;$/;"	r
reg_we_b	blocking_fsm_L1.v	/^    reg reg_we_b;$/;"	r
reg_we_b	nonblocking_fsm.v	/^    reg reg_we_b;$/;"	r
reset	Arbiter1.v	/^	input reset;$/;"	p
reset	Arbiter1_test.v	/^	reg reset;$/;"	r
reset	DMem.v	/^	input reset,$/;"	p
reset	FIFO.v	/^	input clk, enable, reset;$/;"	p
reset	L2_cache.v	/^	input reset,$/;"	p
reset	L2_ram.v	/^	input reset,$/;"	p
reset	MSHR_1.v	/^	input clk, enable, reset;$/;"	p
reset	MSHR_1_test.v	/^	reg clk, enable, reset;$/;"	r
reset	MSHR_2.v	/^	input clk, enable, reset;                         \/\/These inputs and outputs are hopefully mostly self-explanatory$/;"	p
reset	MSHR_2_test.v	/^	reg clk, enable, reset;                         $/;"	r
reset	blocking.v	/^    input reset;$/;"	p
reset	blocking.v	/^    tri0 reset;$/;"	n
reset	blocking_fsm.v	/^    input reset,$/;"	p
reset	blocking_fsm_L1.v	/^    input reset,$/;"	p
reset	fast_to_slow_clk_signal.v	/^	input signal_in, clk_fast, clk_slow, reset;$/;"	p
reset	fill_list_shift_register.v	/^	input clk, enable, reset;$/;"	p
reset	free_list_FIFO.v	/^	input clk, enable, reset;$/;"	p
reset	mshr_dummy.v	/^    input clk, enable, reset, $/;"	p
reset	nn_de3_cache_test.v	/^	wire reset;	$/;"	n
reset	nonblocking_fsm.v	/^    input reset,$/;"	p
reset	slow_to_fast_clk_signal.v	/^	input signal_in, clk_fast, clk_slow, reset;$/;"	p
reset	test_L2.v	/^	reg reset;	$/;"	r
reset	test_blocking.v	/^	reg reset;	$/;"	r
reset	test_nonblocking.v	/^	reg reset;	$/;"	r
reset	test_shared.v	/^	reg reset;	$/;"	r
reset_time	nn_de3_cache_test.v	/^reg [31:0] reset_time;	\/\/check we will reset again$/;"	r
rn_addr	MSHR_2.v	/^	output [addr_bits-1:0] rn_addr;$/;"	p
rn_addr	MSHR_2_test.v	/^	wire [addr_bits-1:0] rn_addr;$/;"	n
rn_cpu_id	MSHR_2.v	/^	output [cpu_id_bits-1:0] rn_cpu_id;$/;"	p
rn_cpu_id	MSHR_2_test.v	/^	wire [cpu_id_bits-1:0] rn_cpu_id;$/;"	n
rn_data	MSHR_2.v	/^	output [data_bits-1:0] rn_data;$/;"	p
rn_data	MSHR_2_test.v	/^	wire [data_bits-1:0] rn_data;$/;"	n
rn_dirty	MSHR_2.v	/^	output rn_dirty;$/;"	p
rn_dirty	MSHR_2_test.v	/^	wire rn_dirty;$/;"	n
rn_mshr_id	MSHR_2.v	/^	output [mshr_tag_bits-1:0] rn_mshr_id;$/;"	p
rn_mshr_id	MSHR_2_test.v	/^	wire [mshr_tag_bits-1:0] rn_mshr_id;$/;"	n
rn_rw	MSHR_2.v	/^	output rn_rw;$/;"	p
rn_rw	MSHR_2_test.v	/^	wire rn_rw;$/;"	n
rn_valid	MSHR_2.v	/^	output rn_valid;$/;"	p
rn_valid	MSHR_2_test.v	/^	wire rn_valid;$/;"	n
rn_victim	MSHR_2.v	/^	output [ASSOC_BITS-1:0] rn_victim;$/;"	p
rw	MSHR_2.v	/^	reg rw [0:2**mshr_tag_bits-1];	$/;"	r
rw_L1	cache_shared.v	/^	wire [NUM_L1-1:0] rw_L1;$/;"	n
rw_L1_in	Arbiter1.v	/^	input [num_L1s-1:0] valid_L1_in, rw_L1_in;$/;"	p
rw_L1_in	Arbiter1_test.v	/^	reg [num_L1s-1:0] valid_L1_in, rw_L1_in;$/;"	r
rw_L1_in_w	Arbiter1.v	/^	wire [num_L1s-1:0] valid_L1_in_w, rw_L1_in_w;$/;"	n
rw_L1_out	Arbiter1.v	/^	output [num_L1s-1:0] valid_L1_out, rw_L1_out;$/;"	p
rw_L1_out	Arbiter1_test.v	/^	wire [num_L1s-1:0] valid_L1_out, rw_L1_out;$/;"	n
rw_L2_in	Arbiter1.v	/^	input valid_L2_in, rw_L2_in;$/;"	p
rw_L2_in	Arbiter1_test.v	/^	reg valid_L2_in, rw_L2_in;$/;"	r
rw_L2_in_ex	Arbiter1.v	/^	wire [num_L1s-1:0]valid_L2_in_ex, rw_L2_in_ex;$/;"	n
rw_L2_out	Arbiter1.v	/^	output valid_L2_out, rw_L2_out;$/;"	p
rw_L2_out	Arbiter1_test.v	/^	wire valid_L2_out, rw_L2_out;$/;"	n
rw_bef_reg	L1_cache.v	/^	wire rw_bef_reg;$/;"	n
rw_bef_reg	L2_cache.v	/^	wire rw_bef_reg;$/;"	n
rw_in	L1_cache.v	/^	input rw_in, 								\/\/ read \/ write command$/;"	p
rw_in	Mem_dummy.v	/^	input rw_in, 								\/\/ read \/ write command$/;"	p
rw_in	cache_subsystem.v	/^	input rw_in, 								\/\/ read \/ write command$/;"	p
rw_in	nn_de3_cache_test.v	/^	reg rw_in; 								\/\/ read \/ write command$/;"	r
rw_in	test_L2.v	/^	reg rw_in; 								\/\/ read \/ write command$/;"	r
rw_in	test_blocking.v	/^	reg rw_in; 								\/\/ read \/ write command$/;"	r
rw_in	test_nonblocking.v	/^	reg rw_in; 								\/\/ read \/ write command$/;"	r
rw_in1	cache_shared.v	/^	input rw_in1, 								\/\/ read \/ write command$/;"	p
rw_in1	test_shared.v	/^	reg rw_in1; 								\/\/ read \/ write command$/;"	r
rw_in2	test_shared.v	/^	reg rw_in2; 								\/\/ read \/ write command$/;"	r
rw_l2	blocking.v	/^    output rw_l2;$/;"	p
rw_l2	blocking.v	/^    reg rw_l2;$/;"	r
rw_prev	L1_cache.v	/^	reg rw_prev;$/;"	r
rw_prev	L2_cache.v	/^	reg rw_prev;$/;"	r
rw_prev	blocking.v	/^    input rw_prev;$/;"	p
rw_prev	blocking.v	/^    tri0 rw_prev;$/;"	n
same_line	nonblocking_fsm.v	/^	 input same_line,$/;"	p
same_line_true	MSHR_2.v	/^	output same_line_true;$/;"	p
sel_a	L2_cache.v	/^	wire [ASSOCIATIVITY-1:0] sel_a;$/;"	n
sel_a	data_ram.v	/^	reg [2**WORD_BITS-1:0] sel_a;$/;"	r
sel_a_temp	L2_cache.v	/^	reg [ASSOCIATIVITY-1:0] sel_a_temp; $/;"	r
sel_b	L2_cache.v	/^	reg [ASSOCIATIVITY-1:0] sel_b;$/;"	r
sel_b_temp	L2_cache.v	/^	reg [ASSOCIATIVITY-1:0] sel_b_temp;$/;"	r
select	bus_signal_switcher.v	/^	input [num_buses_log-1:0] select;$/;"	p
shift_var	fill_list_shift_register.v	/^	wire shift_var [0:2**tag_bits-1];$/;"	n
signal_in	fast_to_slow_clk_signal.v	/^	input signal_in, clk_fast, clk_slow, reset;$/;"	p
signal_in	slow_to_fast_clk_signal.v	/^	input signal_in, clk_fast, clk_slow, reset;$/;"	p
signal_out	fast_to_slow_clk_signal.v	/^	output signal_out;$/;"	p
size	FIFO.v	/^	reg [index_bits:0] size;$/;"	r
size	fill_list_shift_register.v	/^	reg [tag_bits:0] size;$/;"	r
size	free_list_FIFO.v	/^	reg [tag_bits:0] size;$/;"	r
slow_to_fast_clk_signal	slow_to_fast_clk_signal.v	/^module slow_to_fast_clk_signal$/;"	m
stall_l2	blocking.v	/^    input stall_l2;$/;"	p
stall_l2	blocking.v	/^    tri0 stall_l2;$/;"	n
stall_l2	blocking_fsm.v	/^    input stall_l2,$/;"	p
stall_l2	blocking_fsm_L1.v	/^    input stall_l2,$/;"	p
stall_l2	nonblocking_fsm.v	/^    input stall_l2,$/;"	p
stall_out	L1_cache.v	/^	output stall_out, 							\/\/ the memory system cannot accept anymore requests$/;"	p
stall_out	L2_cache.v	/^	output stall_out 							\/\/ the memory system cannot accept anymore requests$/;"	p
stall_out	Mem_dummy.v	/^	output stall_out 							\/\/ the memory system cannot accept anymore requests$/;"	p
stall_out	cache_subsystem.v	/^	output stall_out 							\/\/ the memory system cannot accept anymore requests$/;"	p
stall_out	nn_de3_cache_test.v	/^	wire stall_out;							\/\/ the memory system cannot accept anymore requests$/;"	n
stall_out	test_L2.v	/^	wire stall_out;							\/\/ the memory system cannot accept anymore requests$/;"	n
stall_out	test_blocking.v	/^	wire stall_out;							\/\/ the memory system cannot accept anymore requests$/;"	n
stall_out	test_nonblocking.v	/^	wire stall_out;							\/\/ the memory system cannot accept anymore requests$/;"	n
stall_out1	cache_shared.v	/^	output stall_out1, 							\/\/ the memory system cannot accept anymore requests$/;"	p
stall_out1	test_shared.v	/^	wire stall_out1;							\/\/ the memory system cannot accept anymore requests$/;"	n
stall_out2	test_shared.v	/^	wire stall_out2;							\/\/ the memory system cannot accept anymore requests$/;"	n
stall_out_L1	cache_shared.v	/^	wire [NUM_L1-1:0] stall_out_L1;$/;"	n
stall_out_fsm	L1_cache.v	/^	wire stall_out_fsm;$/;"	n
stall_out_fsm	L2_cache.v	/^	wire stall_out_fsm;$/;"	n
stall_proc	blocking.v	/^    output stall_proc;$/;"	p
stall_proc	blocking.v	/^    reg stall_proc;$/;"	r
stop	nn_de3_cache_test.v	/^reg stop;$/;"	r
sub_wire0	RAM_MGF.v	/^	wire [31:0] sub_wire0;$/;"	n
sub_wire1	RAM_MGF.v	/^	wire [255:0] sub_wire1;$/;"	n
tag_a	L1_cache.v	/^	wire [ADDR_WIDTH-LINE_BITS-INDEX_BITS-1:0] tag_in, tag_a;$/;"	n
tag_a	L1_tag.v	/^	input [TAG_BITS-1:0] tag_a, tag_b,$/;"	p
tag_a	L2_ram.v	/^	wire [TAG_BITS-1:0] tag_a;$/;"	n
tag_a	tag_array.v	/^	input [TAG_BITS-1:0] tag_a, tag_b,$/;"	p
tag_a_dec	L2_ram.v	/^	wire [TAG_BITS-1:0] tag_a_dec [0:ASSOCIATIVITY-1];$/;"	n
tag_a_dirty_in	L1_cache.v	/^	wire tag_a_dirty_in;$/;"	n
tag_a_valid_in	L1_cache.v	/^	wire tag_a_valid_in;$/;"	n
tag_a_we	L1_cache.v	/^	wire tag_a_we;$/;"	n
tag_b	L1_cache.v	/^	wire [ADDR_WIDTH-LINE_BITS-INDEX_BITS-1:0] tag_b;$/;"	n
tag_b	L1_tag.v	/^	input [TAG_BITS-1:0] tag_a, tag_b,$/;"	p
tag_b	L2_ram.v	/^	wire [TAG_BITS-1:0] tag_b;$/;"	n
tag_b	tag_array.v	/^	input [TAG_BITS-1:0] tag_a, tag_b,$/;"	p
tag_b_dec	L2_ram.v	/^	wire [TAG_BITS-1:0] tag_b_dec [0:ASSOCIATIVITY-1];$/;"	n
tag_b_dirty_in	L1_cache.v	/^	wire tag_b_dirty_in;$/;"	n
tag_b_valid_in	L1_cache.v	/^	wire tag_b_valid_in;$/;"	n
tag_b_we	L1_cache.v	/^	wire tag_b_we;$/;"	n
tag_bus_a	L2_ram.v	/^	wire [(TAG_BITS*ASSOCIATIVITY)-1:0] tag_bus_a; $/;"	n
tag_bus_b	L2_ram.v	/^	wire [(TAG_BITS*ASSOCIATIVITY)-1:0] tag_bus_b;$/;"	n
tag_in	L1_cache.v	/^	wire [ADDR_WIDTH-LINE_BITS-INDEX_BITS-1:0] tag_in, tag_a;$/;"	n
tag_list	FIFO.v	/^	reg [data_width-1:0] tag_list [0:2**index_bits-1];$/;"	r
tag_list	free_list_FIFO.v	/^	reg [tag_bits-1:0] tag_list [0:2**tag_bits-1];$/;"	r
tag_list_valid	FIFO.v	/^	reg tag_list_valid [0:2**index_bits-1];$/;"	r
tag_list_valid	free_list_FIFO.v	/^	reg tag_list_valid [0:2**tag_bits-1];$/;"	r
tag_out	L1_cache.v	/^	wire [ADDR_WIDTH-LINE_BITS-INDEX_BITS-1:0] tag_out;$/;"	n
tag_out_a	L2_cache.v	/^	wire [TAG_BITS-1:0] tag_out_a;$/;"	n
tag_out_a_dec	L2_ram.v	/^	wire [TAG_BITS-1:0] tag_out_a_dec [0:ASSOCIATIVITY-1];$/;"	n
tag_out_b	L1_cache.v	/^	wire [ADDR_WIDTH-LINE_BITS-INDEX_BITS-1:0] tag_out_b;$/;"	n
tag_out_b	L2_cache.v	/^	wire [TAG_BITS-1:0] tag_out_b;$/;"	n
tag_out_b_dec	L2_ram.v	/^	wire [TAG_BITS-1:0] tag_out_b_dec [0:ASSOCIATIVITY-1];$/;"	n
tag_prev	L1_cache.v	/^	reg [ADDR_WIDTH-LINE_BITS-INDEX_BITS-1:0] tag_prev;$/;"	r
tag_ram	L1_tag.v	/^	reg [TAG_BITS-1:0] tag_ram[0:2**INDEX_WIDTH-1];$/;"	r
tag_ram	tag_array.v	/^	reg [TAG_BITS-1:0] tag_ram[0:2**INDEX_WIDTH-1];$/;"	r
tags	MSHR_1.v	/^	reg [addr_tag_bits-1:0] tags [0:2**mshr_tag_bits-1];$/;"	r
tags	fill_list_shift_register.v	/^	reg [tag_bits-1:0] tags [0:2**tag_bits-1];$/;"	r
tail_ptr	FIFO.v	/^	reg [index_bits-1:0] tail_ptr;$/;"	r
tail_ptr	free_list_FIFO.v	/^	reg [tag_bits-1:0] tail_ptr;$/;"	r
temp	MSHR_2.v	/^	reg [mshr_tag_bits-1:0] temp;$/;"	r
temp	data_ram.v	/^	wire [SMALL_DATA_WIDTH-1:0] temp [0:2**WORD_BITS-1]; $/;"	n
test2	test_blocking.v	/^module test2;$/;"	m
test_L2	test_L2.v	/^module test_L2;$/;"	m
test_nonblocking	test_nonblocking.v	/^module test_nonblocking;$/;"	m
test_shared	test_shared.v	/^module test_shared;$/;"	m
tick	nn_de3_cache_test.v	/^reg tick;$/;"	r
val	MSHR_1.v	/^	reg val [0:2**mshr_tag_bits-1];$/;"	r
val	MSHR_2.v	/^	reg val [0:2**mshr_tag_bits-1];$/;"	r
val	fill_list_shift_register.v	/^	reg val [0:2**tag_bits-1];$/;"	r
valid_L1	cache_shared.v	/^	wire [NUM_L1-1:0] valid_L1;$/;"	n
valid_L1_in	Arbiter1.v	/^	input [num_L1s-1:0] valid_L1_in, rw_L1_in;$/;"	p
valid_L1_in	Arbiter1_test.v	/^	reg [num_L1s-1:0] valid_L1_in, rw_L1_in;$/;"	r
valid_L1_in_w	Arbiter1.v	/^	wire [num_L1s-1:0] valid_L1_in_w, rw_L1_in_w;$/;"	n
valid_L1_out	Arbiter1.v	/^	output [num_L1s-1:0] valid_L1_out, rw_L1_out;$/;"	p
valid_L1_out	Arbiter1_test.v	/^	wire [num_L1s-1:0] valid_L1_out, rw_L1_out;$/;"	n
valid_L2_in	Arbiter1.v	/^	input valid_L2_in, rw_L2_in;$/;"	p
valid_L2_in	Arbiter1_test.v	/^	reg valid_L2_in, rw_L2_in;$/;"	r
valid_L2_in_ex	Arbiter1.v	/^	wire [num_L1s-1:0]valid_L2_in_ex, rw_L2_in_ex;$/;"	n
valid_L2_out	Arbiter1.v	/^	output valid_L2_out, rw_L2_out;$/;"	p
valid_L2_out	Arbiter1_test.v	/^	wire valid_L2_out, rw_L2_out;$/;"	n
valid_a_i	L1_tag.v	/^	input valid_a_i, valid_b_i,$/;"	p
valid_a_i	L2_cache.v	/^	wire [ASSOCIATIVITY-1:0] valid_a_i;$/;"	n
valid_a_i	L2_ram.v	/^	input [2**ASSOC_BITS-1:0] valid_a_i, valid_b_i,$/;"	p
valid_a_i	tag_array.v	/^	input valid_a_i, valid_b_i,$/;"	p
valid_a_o	L2_cache.v	/^	wire valid_a_o;$/;"	n
valid_a_o	L2_ram.v	/^	wire [ASSOCIATIVITY-1:0] valid_a_o;$/;"	n
valid_b_i	L1_tag.v	/^	input valid_a_i, valid_b_i,$/;"	p
valid_b_i	L2_cache.v	/^	wire [ASSOCIATIVITY-1:0] valid_b_i;$/;"	n
valid_b_i	L2_ram.v	/^	input [2**ASSOC_BITS-1:0] valid_a_i, valid_b_i,$/;"	p
valid_b_i	tag_array.v	/^	input valid_a_i, valid_b_i,$/;"	p
valid_b_o	L2_cache.v	/^	wire valid_b_o;$/;"	n
valid_b_o	L2_ram.v	/^	wire [ASSOCIATIVITY-1:0] valid_b_o;$/;"	n
valid_delay	Mem_dummy.v	/^	reg valid_delay [0:MEM_CYCLE-1];$/;"	r
valid_in	L2_cache.v	/^	input valid_in, 							\/\/  valid input on the addr, data buses$/;"	p
valid_in	nn_de3_cache_test.v	/^	wire valid_in; 							\/\/  valid reg on the addr, data buses$/;"	n
valid_in	test_L2.v	/^	reg valid_in; 							\/\/  valid reg on the addr, data buses$/;"	r
valid_in	test_blocking.v	/^	reg valid_in; 							\/\/  valid reg on the addr, data buses$/;"	r
valid_in	test_nonblocking.v	/^	reg valid_in; 							\/\/  valid reg on the addr, data buses$/;"	r
valid_in1	test_shared.v	/^	reg valid_in1; 							\/\/  valid reg on the addr, data buses$/;"	r
valid_in2	cache_shared.v	/^	input valid_in2, 							\/\/  valid input on the addr, data buses$/;"	p
valid_in2	test_shared.v	/^	reg valid_in2; 							\/\/  valid reg on the addr, data buses$/;"	r
valid_l2	blocking.v	/^    output valid_l2;$/;"	p
valid_l2	blocking.v	/^    reg valid_l2;$/;"	r
valid_out	L1_cache.v	/^	wire valid_out;$/;"	n
valid_out_b	L1_cache.v	/^	wire valid_out_b;$/;"	n
valid_ram	L1_tag.v	/^	reg valid_ram[0:2**INDEX_WIDTH-1];$/;"	r
valid_ram	tag_array.v	/^	reg valid_ram[0:2**INDEX_WIDTH-1];$/;"	r
valid_real	L1_cache.v	/^	wire valid_real;$/;"	n
valid_real	L2_cache.v	/^	wire valid_real;$/;"	n
victim	MSHR_2.v	/^	reg [ASSOC_BITS-1:0] victim [0:2**mshr_tag_bits-1];$/;"	r
victim_a	L1_cache.v	/^	wire [ASSOC_BITS-1:0] victim_a, victim_b;$/;"	n
victim_a	L2_cache.v	/^	wire [ASSOC_BITS-1:0] victim_a, victim_b;$/;"	n
victim_b	L1_cache.v	/^	wire [ASSOC_BITS-1:0] victim_a, victim_b;$/;"	n
victim_b	L2_cache.v	/^	wire [ASSOC_BITS-1:0] victim_a, victim_b;$/;"	n
victim_prev	L1_cache.v	/^	reg [ASSOC_BITS-1:0] mshr_rn_victim_d, victim_prev;$/;"	r
victim_prev	L2_cache.v	/^	reg [ASSOC_BITS-1:0] mshr_rn_victim_d, victim_prev;$/;"	r
victim_temp	L1_cache.v	/^	reg [ASSOC_BITS-1:0] counter, victim_temp;$/;"	r
victim_temp	L2_cache.v	/^	reg [ASSOC_BITS-1:0] counter, victim_temp;$/;"	r
we_a	L1_tag.v	/^	input we_a, we_b, clk,$/;"	p
we_a	L2_cache.v	/^	reg [ASSOCIATIVITY-1:0] we_a; $/;"	r
we_a	L2_ram.v	/^	input [2**ASSOC_BITS-1:0] we_a, we_b, $/;"	p
we_a	array.v	/^	input we_a, we_b, clk,$/;"	p
we_a	tag_array.v	/^	input we_a, we_b, clk, new_clk,$/;"	p
we_a_temp	L2_cache.v	/^	wire we_a_temp;$/;"	n
we_b	L1_tag.v	/^	input we_a, we_b, clk,$/;"	p
we_b	L2_cache.v	/^	reg [ASSOCIATIVITY-1:0] we_b;$/;"	r
we_b	L2_ram.v	/^	input [2**ASSOC_BITS-1:0] we_a, we_b, $/;"	p
we_b	array.v	/^	input we_a, we_b, clk,$/;"	p
we_b	blocking.v	/^    output we_b;$/;"	p
we_b	blocking.v	/^    reg we_b;$/;"	r
we_b	tag_array.v	/^	input we_a, we_b, clk, new_clk,$/;"	p
we_b_temp	L2_cache.v	/^	wire we_b_temp;$/;"	n
which_L1	Arbiter1.v	/^	input [num_L1s_log-1:0] which_L1; $/;"	p
which_L1	Arbiter1_test.v	/^	reg [num_L1s_log-1:0] which_L1; $/;"	r
which_L1	cache_shared.v	/^	wire which_L1;$/;"	n
which_L1_out	Arbiter1.v	/^	output [num_L1s_log-1:0] which_L1_out; $/;"	p
which_L1_out	Arbiter1_test.v	/^	wire [num_L1s_log-1:0] which_L1_out; $/;"	n
word_a	L1_cache.v	/^	wire [LINE_BITS-2-1:0] word_in, word_a;$/;"	n
word_a	data_ram.v	/^	input [WORD_BITS-1:0] word_a, \/\/word_b,$/;"	p
word_a_d	L1_cache.v	/^	reg [LINE_BITS-2-1:0] word_a_d;$/;"	r
word_in	L1_cache.v	/^	wire [LINE_BITS-2-1:0] word_in, word_a;$/;"	n
word_prev	L1_cache.v	/^	reg [LINE_BITS-2-1:0] word_prev;$/;"	r
wr_en	DMem.v	/^	input wr_en, $/;"	p
wren_a	RAM_MGF.v	/^	input	  wren_a;$/;"	p
wren_a	RAM_MGF.v	/^	tri0	  wren_a;$/;"	n
wren_a	RAM_MGF_bb.v	/^	input	  wren_a;$/;"	p
wren_a	RAM_MGF_bb.v	/^	tri0	  wren_a;$/;"	n
wren_b	RAM_MGF.v	/^	input	  wren_b;$/;"	p
wren_b	RAM_MGF.v	/^	tri0	  wren_b;$/;"	n
wren_b	RAM_MGF_bb.v	/^	input	  wren_b;$/;"	p
wren_b	RAM_MGF_bb.v	/^	tri0	  wren_b;$/;"	n
xx	MSHR_1.v	/^	integer xx;$/;"	r
xx	MSHR_2.v	/^	integer xx;$/;"	r
