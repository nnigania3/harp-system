@gd{gnu,
  word = {GNU},
  definition = {classic recursive acronym, ``GNU's Not Unix''}
}
@gd{losa,
  word = {LOSA},
  definition = {List of Symbols or Abbreviations}
}
@gd{losahang,
  word = {losahang},
  definition = {The Graduate Office prefers that the symbol 
  descriptions are rigidly separated from the symbols themselves, 
  as you see in this list.  Sometimes, if you have very long
  symbols/abbreviations, you may need to make \texttt{\bs{}losahang}
  bigger than its default value of 2cm.  In this example, 
  thanks to the very long `neuromorphic engineering' ``symbol'', I
  extended \texttt{\bs{}losahang} to 5cm using the command:
  \texttt{\bs{}setlength\{\bs{}losahang\}\{5cm\}}.  That is why this
  ``list of symbols'' facility should be limited to \textbf{symbols} 
  and \textbf{abbreviations}, which are short; use 
  \programname{gatech-thesis-gloss} for true glossaries. The 
  Graduate Office does not mention glossaries, but does mention the 
  List of Symbols or Abbreviations.  However, this is not to imply
  that you may not create a glossary if you wish; the \emph{old}
  OGS style manual did mention a glossary or `List of Nomenclature' 
  along with the List of Symbols or Abbreviations.}
}
@gd{morphgrow,
  word = {\oplus},
  definition = {morphological growth operator}
}
@gd{PE,
  word = {PE},
  definition = {processing element}
}
@gd{neuroeng,
  word = {neuromorphic engineering},
  definition = {reverse engineering the information representation 
  used by neurobiology, and developing artificial systems that employ 
  these representations in their operation.  The presence of this ``symbol''
  in the list of symbols also demonstrates why you should use the
  \programname{gatech-thesis-gloss} style for glossaries, and that long words
  like ``neuromorphic engineering'' should appear \emph{there}, and not
  \emph{here}.  \emph{Here} is for \textbf{symbols} and \textbf{abbreviations}}
}
@gd{VLSI,
  word = {VLSI},
  definition = {Very Large Scale Integration or Integrated}
}
@gd{aVLSI,
  word = {aVLSI},
  definition = {analog VLSI}
}
